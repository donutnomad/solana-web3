// This code was AUTOGENERATED using the library.
// Please DO NOT EDIT THIS FILE.

package mpl_token_metadata

import (
	"bytes"
	"fmt"
	spew "github.com/davecgh/go-spew/spew"
	common "github.com/donutnomad/solana-web3/common"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
	text "github.com/gagliardetto/solana-go/text"
	treeout "github.com/gagliardetto/treeout"
)

var ProgramID common.PublicKey = common.MustPublicKeyFromBase58("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")

func SetProgramID(pubkey common.PublicKey) {
	ProgramID = pubkey
	if !common.IsZero(ProgramID) {
		solanago.RegisterInstructionDecoder(common.As(ProgramID), registryDecodeInstruction)
	}
}

const ProgramName = "mpl_token_metadata"

func init() {
	if !common.IsZero(ProgramID) {
		solanago.RegisterInstructionDecoder(common.As(ProgramID), registryDecodeInstruction)
	}
}

func btou32(b bool) uint32 {
	if b {
		return 1
	}
	return 0
}

var (
	Instruction_CreateMetadataAccount                                     uint8 = 0
	Instruction_UpdateMetadataAccount                                     uint8 = 1
	Instruction_DeprecatedCreateMasterEdition                             uint8 = 2
	Instruction_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken uint8 = 3
	Instruction_UpdatePrimarySaleHappenedViaToken                         uint8 = 4
	Instruction_DeprecatedSetReservationList                              uint8 = 5
	Instruction_DeprecatedCreateReservationList                           uint8 = 6
	Instruction_SignMetadata                                              uint8 = 7
	Instruction_DeprecatedMintPrintingTokensViaToken                      uint8 = 8
	Instruction_DeprecatedMintPrintingTokens                              uint8 = 9
	Instruction_CreateMasterEdition                                       uint8 = 10
	Instruction_MintNewEditionFromMasterEditionViaToken                   uint8 = 11
	Instruction_ConvertMasterEditionV1ToV2                                uint8 = 12
	Instruction_MintNewEditionFromMasterEditionViaVaultProxy              uint8 = 13
	Instruction_PuffMetadata                                              uint8 = 14
	Instruction_UpdateMetadataAccountV2                                   uint8 = 15
	Instruction_CreateMetadataAccountV2                                   uint8 = 16
	Instruction_CreateMasterEditionV3                                     uint8 = 17
	Instruction_VerifyCollection                                          uint8 = 18
	Instruction_Utilize                                                   uint8 = 19
	Instruction_ApproveUseAuthority                                       uint8 = 20
	Instruction_RevokeUseAuthority                                        uint8 = 21
	Instruction_UnverifyCollection                                        uint8 = 22
	Instruction_ApproveCollectionAuthority                                uint8 = 23
	Instruction_RevokeCollectionAuthority                                 uint8 = 24
	Instruction_SetAndVerifyCollection                                    uint8 = 25
	Instruction_FreezeDelegatedAccount                                    uint8 = 26
	Instruction_ThawDelegatedAccount                                      uint8 = 27
	Instruction_RemoveCreatorVerification                                 uint8 = 28
	Instruction_BurnNft                                                   uint8 = 29
	Instruction_VerifySizedCollectionItem                                 uint8 = 30
	Instruction_UnverifySizedCollectionItem                               uint8 = 31
	Instruction_SetAndVerifySizedCollectionItem                           uint8 = 32
	Instruction_CreateMetadataAccountV3                                   uint8 = 33
	Instruction_SetCollectionSize                                         uint8 = 34
	Instruction_SetTokenStandard                                          uint8 = 35
	Instruction_BubblegumSetCollectionSize                                uint8 = 36
	Instruction_BurnEditionNft                                            uint8 = 37
	Instruction_CreateEscrowAccount                                       uint8 = 38
	Instruction_CloseEscrowAccount                                        uint8 = 39
	Instruction_TransferOutOfEscrow                                       uint8 = 40
	Instruction_Burn                                                      uint8 = 41
	Instruction_Create                                                    uint8 = 42
	Instruction_Mint                                                      uint8 = 43
	Instruction_Delegate                                                  uint8 = 44
	Instruction_Revoke                                                    uint8 = 45
	Instruction_Lock                                                      uint8 = 46
	Instruction_Unlock                                                    uint8 = 47
	Instruction_Migrate                                                   uint8 = 48
	Instruction_Transfer                                                  uint8 = 49
	Instruction_Update                                                    uint8 = 50
	Instruction_Use                                                       uint8 = 51
	Instruction_Verify                                                    uint8 = 52
	Instruction_Unverify                                                  uint8 = 53
	Instruction_Collect                                                   uint8 = 54
	Instruction_Print                                                     uint8 = 55
)

var InstructionImplDef = binary.NewVariantDefinition(binary.Uint8TypeIDEncoding, []binary.VariantType{
	{
		"create_metadata_account", (*CreateMetadataAccount)(nil),
	},
	{
		"update_metadata_account", (*UpdateMetadataAccount)(nil),
	},
	{
		"deprecated_create_master_edition", (*DeprecatedCreateMasterEdition)(nil),
	},
	{
		"deprecated_mint_new_edition_from_master_edition_via_printing_token", (*DeprecatedMintNewEditionFromMasterEditionViaPrintingToken)(nil),
	},
	{
		"update_primary_sale_happened_via_token", (*UpdatePrimarySaleHappenedViaToken)(nil),
	},
	{
		"deprecated_set_reservation_list", (*DeprecatedSetReservationList)(nil),
	},
	{
		"deprecated_create_reservation_list", (*DeprecatedCreateReservationList)(nil),
	},
	{
		"sign_metadata", (*SignMetadata)(nil),
	},
	{
		"deprecated_mint_printing_tokens_via_token", (*DeprecatedMintPrintingTokensViaToken)(nil),
	},
	{
		"deprecated_mint_printing_tokens", (*DeprecatedMintPrintingTokens)(nil),
	},
	{
		"create_master_edition", (*CreateMasterEdition)(nil),
	},
	{
		"mint_new_edition_from_master_edition_via_token", (*MintNewEditionFromMasterEditionViaToken)(nil),
	},
	{
		"convert_master_edition_v1_to_v2", (*ConvertMasterEditionV1ToV2)(nil),
	},
	{
		"mint_new_edition_from_master_edition_via_vault_proxy", (*MintNewEditionFromMasterEditionViaVaultProxy)(nil),
	},
	{
		"puff_metadata", (*PuffMetadata)(nil),
	},
	{
		"update_metadata_account_v2", (*UpdateMetadataAccountV2)(nil),
	},
	{
		"create_metadata_account_v2", (*CreateMetadataAccountV2)(nil),
	},
	{
		"create_master_edition_v3", (*CreateMasterEditionV3)(nil),
	},
	{
		"verify_collection", (*VerifyCollection)(nil),
	},
	{
		"utilize", (*Utilize)(nil),
	},
	{
		"approve_use_authority", (*ApproveUseAuthority)(nil),
	},
	{
		"revoke_use_authority", (*RevokeUseAuthority)(nil),
	},
	{
		"unverify_collection", (*UnverifyCollection)(nil),
	},
	{
		"approve_collection_authority", (*ApproveCollectionAuthority)(nil),
	},
	{
		"revoke_collection_authority", (*RevokeCollectionAuthority)(nil),
	},
	{
		"set_and_verify_collection", (*SetAndVerifyCollection)(nil),
	},
	{
		"freeze_delegated_account", (*FreezeDelegatedAccount)(nil),
	},
	{
		"thaw_delegated_account", (*ThawDelegatedAccount)(nil),
	},
	{
		"remove_creator_verification", (*RemoveCreatorVerification)(nil),
	},
	{
		"burn_nft", (*BurnNft)(nil),
	},
	{
		"verify_sized_collection_item", (*VerifySizedCollectionItem)(nil),
	},
	{
		"unverify_sized_collection_item", (*UnverifySizedCollectionItem)(nil),
	},
	{
		"set_and_verify_sized_collection_item", (*SetAndVerifySizedCollectionItem)(nil),
	},
	{
		"create_metadata_account_v3", (*CreateMetadataAccountV3)(nil),
	},
	{
		"set_collection_size", (*SetCollectionSize)(nil),
	},
	{
		"set_token_standard", (*SetTokenStandard)(nil),
	},
	{
		"bubblegum_set_collection_size", (*BubblegumSetCollectionSize)(nil),
	},
	{
		"burn_edition_nft", (*BurnEditionNft)(nil),
	},
	{
		"create_escrow_account", (*CreateEscrowAccount)(nil),
	},
	{
		"close_escrow_account", (*CloseEscrowAccount)(nil),
	},
	{
		"transfer_out_of_escrow", (*TransferOutOfEscrow)(nil),
	},
	{
		"burn", (*Burn)(nil),
	},
	{
		"create", (*Create)(nil),
	},
	{
		"mint", (*Mint)(nil),
	},
	{
		"delegate", (*Delegate)(nil),
	},
	{
		"revoke", (*Revoke)(nil),
	},
	{
		"lock", (*Lock)(nil),
	},
	{
		"unlock", (*Unlock)(nil),
	},
	{
		"migrate", (*Migrate)(nil),
	},
	{
		"transfer", (*Transfer)(nil),
	},
	{
		"update", (*Update)(nil),
	},
	{
		"use", (*Use)(nil),
	},
	{
		"verify", (*Verify)(nil),
	},
	{
		"unverify", (*Unverify)(nil),
	},
	{
		"collect", (*Collect)(nil),
	},
	{
		"print", (*Print)(nil),
	},
})

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id uint8) string {
	switch id {
	case Instruction_CreateMetadataAccount:
		return "CreateMetadataAccount"
	case Instruction_UpdateMetadataAccount:
		return "UpdateMetadataAccount"
	case Instruction_DeprecatedCreateMasterEdition:
		return "DeprecatedCreateMasterEdition"
	case Instruction_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken:
		return "DeprecatedMintNewEditionFromMasterEditionViaPrintingToken"
	case Instruction_UpdatePrimarySaleHappenedViaToken:
		return "UpdatePrimarySaleHappenedViaToken"
	case Instruction_DeprecatedSetReservationList:
		return "DeprecatedSetReservationList"
	case Instruction_DeprecatedCreateReservationList:
		return "DeprecatedCreateReservationList"
	case Instruction_SignMetadata:
		return "SignMetadata"
	case Instruction_DeprecatedMintPrintingTokensViaToken:
		return "DeprecatedMintPrintingTokensViaToken"
	case Instruction_DeprecatedMintPrintingTokens:
		return "DeprecatedMintPrintingTokens"
	case Instruction_CreateMasterEdition:
		return "CreateMasterEdition"
	case Instruction_MintNewEditionFromMasterEditionViaToken:
		return "MintNewEditionFromMasterEditionViaToken"
	case Instruction_ConvertMasterEditionV1ToV2:
		return "ConvertMasterEditionV1ToV2"
	case Instruction_MintNewEditionFromMasterEditionViaVaultProxy:
		return "MintNewEditionFromMasterEditionViaVaultProxy"
	case Instruction_PuffMetadata:
		return "PuffMetadata"
	case Instruction_UpdateMetadataAccountV2:
		return "UpdateMetadataAccountV2"
	case Instruction_CreateMetadataAccountV2:
		return "CreateMetadataAccountV2"
	case Instruction_CreateMasterEditionV3:
		return "CreateMasterEditionV3"
	case Instruction_VerifyCollection:
		return "VerifyCollection"
	case Instruction_Utilize:
		return "Utilize"
	case Instruction_ApproveUseAuthority:
		return "ApproveUseAuthority"
	case Instruction_RevokeUseAuthority:
		return "RevokeUseAuthority"
	case Instruction_UnverifyCollection:
		return "UnverifyCollection"
	case Instruction_ApproveCollectionAuthority:
		return "ApproveCollectionAuthority"
	case Instruction_RevokeCollectionAuthority:
		return "RevokeCollectionAuthority"
	case Instruction_SetAndVerifyCollection:
		return "SetAndVerifyCollection"
	case Instruction_FreezeDelegatedAccount:
		return "FreezeDelegatedAccount"
	case Instruction_ThawDelegatedAccount:
		return "ThawDelegatedAccount"
	case Instruction_RemoveCreatorVerification:
		return "RemoveCreatorVerification"
	case Instruction_BurnNft:
		return "BurnNft"
	case Instruction_VerifySizedCollectionItem:
		return "VerifySizedCollectionItem"
	case Instruction_UnverifySizedCollectionItem:
		return "UnverifySizedCollectionItem"
	case Instruction_SetAndVerifySizedCollectionItem:
		return "SetAndVerifySizedCollectionItem"
	case Instruction_CreateMetadataAccountV3:
		return "CreateMetadataAccountV3"
	case Instruction_SetCollectionSize:
		return "SetCollectionSize"
	case Instruction_SetTokenStandard:
		return "SetTokenStandard"
	case Instruction_BubblegumSetCollectionSize:
		return "BubblegumSetCollectionSize"
	case Instruction_BurnEditionNft:
		return "BurnEditionNft"
	case Instruction_CreateEscrowAccount:
		return "CreateEscrowAccount"
	case Instruction_CloseEscrowAccount:
		return "CloseEscrowAccount"
	case Instruction_TransferOutOfEscrow:
		return "TransferOutOfEscrow"
	case Instruction_Burn:
		return "Burn"
	case Instruction_Create:
		return "Create"
	case Instruction_Mint:
		return "Mint"
	case Instruction_Delegate:
		return "Delegate"
	case Instruction_Revoke:
		return "Revoke"
	case Instruction_Lock:
		return "Lock"
	case Instruction_Unlock:
		return "Unlock"
	case Instruction_Migrate:
		return "Migrate"
	case Instruction_Transfer:
		return "Transfer"
	case Instruction_Update:
		return "Update"
	case Instruction_Use:
		return "Use"
	case Instruction_Verify:
		return "Verify"
	case Instruction_Unverify:
		return "Unverify"
	case Instruction_Collect:
		return "Collect"
	case Instruction_Print:
		return "Print"
	default:
		return ""
	}
}

func registryDecodeInstruction(accounts []*solanago.AccountMeta, data []byte) (interface{}, error) {
	obj, err := DecodeInstruction(common.ConvertMeta(accounts), data)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func DecodeInstruction(accounts []*common.AccountMeta, data []byte) (*Instruction, error) {
	obj := new(Instruction)
	if err := binary.NewBorshDecoder(data).Decode(obj); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := obj.Impl.(common.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return obj, nil
}

type Instruction struct {
	binary.BaseVariant
	programId *common.PublicKey
	typeIdLen uint8
}

func (obj *Instruction) EncodeToTree(parent treeout.Branches) {
	if enToTree, ok := obj.Impl.(text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(spew.Sdump(obj))
	}
}

func (obj *Instruction) ProgramID() common.PublicKey {
	if obj.programId != nil {
		return *obj.programId
	}
	return ProgramID
}

func (obj *Instruction) Accounts() (out []*common.AccountMeta) {
	return obj.Impl.(common.AccountsGettable).GetAccounts()
}

func (obj *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := binary.NewBorshEncoder(buf).Encode(obj); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Instruction) TextEncode(encoder *text.Encoder, option *text.Option) error {
	return encoder.Encode(obj.Impl, option)
}

func (obj *Instruction) UnmarshalWithDecoder(decoder *binary.Decoder) error {
	return obj.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (obj *Instruction) MarshalWithEncoder(encoder *binary.Encoder) error {
	err := encoder.WriteBytes(obj.TypeID.Bytes()[:obj.typeIdLen], false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(obj.Impl)
}
