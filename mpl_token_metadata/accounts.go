// This code was AUTOGENERATED using the library.
// Please DO NOT EDIT THIS FILE.

package mpl_token_metadata

import (
	common "github.com/donutnomad/solana-web3/common"
	binary "github.com/gagliardetto/binary"
)

// CollectionAuthorityRecord Struct
type CollectionAuthorityRecord struct {
	Key             Key
	Bump            uint8
	UpdateAuthority *common.PublicKey `bin:"optional"`
}

const COLLECTION_AUTHORITY_RECORD_SIZE = 35

func (obj *CollectionAuthorityRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Bump); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.UpdateAuthority != nil); err != nil {
		return err
	}
	if obj.UpdateAuthority != nil {
		if err = encoder.Encode(obj.UpdateAuthority); err != nil {
			return err
		}
	}
	return nil
}

func (obj *CollectionAuthorityRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Bump); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.UpdateAuthority); err != nil {
			return err
		}
	}
	return nil
}

// MetadataDelegateRecord Struct
type MetadataDelegateRecord struct {
	Key             Key
	Bump            uint8
	Mint            common.PublicKey
	Delegate        common.PublicKey
	UpdateAuthority common.PublicKey
}

const METADATA_DELEGATE_RECORD_SIZE = 98

func (obj *MetadataDelegateRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Bump); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Mint); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Delegate); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.UpdateAuthority); err != nil {
		return err
	}
	return nil
}

func (obj *MetadataDelegateRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Bump); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Mint); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Delegate); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.UpdateAuthority); err != nil {
		return err
	}
	return nil
}

// Edition Struct
type Edition struct {
	Key     Key
	Parent  common.PublicKey
	Edition uint64
}

const EDITION_SIZE = 41

func (obj *Edition) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Parent); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Edition); err != nil {
		return err
	}
	return nil
}

func (obj *Edition) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Parent); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Edition); err != nil {
		return err
	}
	return nil
}

// EditionMarker Struct
type EditionMarker struct {
	Key    Key
	Ledger [31]uint8
}

func (obj *EditionMarker) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Ledger); err != nil {
		return err
	}
	return nil
}

func (obj *EditionMarker) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Ledger); err != nil {
		return err
	}
	return nil
}

// EditionMarkerV2 Struct
type EditionMarkerV2 struct {
	Key    Key
	Ledger []byte
}

func (obj *EditionMarkerV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Ledger); err != nil {
		return err
	}
	return nil
}

func (obj *EditionMarkerV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Ledger); err != nil {
		return err
	}
	return nil
}

// TokenOwnedEscrow Struct
type TokenOwnedEscrow struct {
	Key       Key
	BaseToken common.PublicKey
	Authority EscrowAuthority
	Bump      uint8
}

func (obj *TokenOwnedEscrow) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.BaseToken); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Authority); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Bump); err != nil {
		return err
	}
	return nil
}

func (obj *TokenOwnedEscrow) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.BaseToken); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Authority); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Bump); err != nil {
		return err
	}
	return nil
}

// MasterEditionV2 Struct
type MasterEditionV2 struct {
	Key       Key
	Supply    uint64
	MaxSupply *uint64 `bin:"optional"`
}

const MASTER_EDITION_V2_SIZE = 18

func (obj *MasterEditionV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Supply); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.MaxSupply != nil); err != nil {
		return err
	}
	if obj.MaxSupply != nil {
		if err = encoder.Encode(obj.MaxSupply); err != nil {
			return err
		}
	}
	return nil
}

func (obj *MasterEditionV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Supply); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.MaxSupply); err != nil {
			return err
		}
	}
	return nil
}

// MasterEditionV1 Struct
type MasterEditionV1 struct {
	Key                              Key
	Supply                           uint64
	MaxSupply                        *uint64 `bin:"optional"`
	PrintingMint                     common.PublicKey
	OneTimePrintingAuthorizationMint common.PublicKey
}

const MASTER_EDITION_V1_SIZE = 82

func (obj *MasterEditionV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Supply); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.MaxSupply != nil); err != nil {
		return err
	}
	if obj.MaxSupply != nil {
		if err = encoder.Encode(obj.MaxSupply); err != nil {
			return err
		}
	}
	if err = encoder.Encode(&obj.PrintingMint); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.OneTimePrintingAuthorizationMint); err != nil {
		return err
	}
	return nil
}

func (obj *MasterEditionV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Supply); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.MaxSupply); err != nil {
			return err
		}
	}
	if err = decoder.Decode(&obj.PrintingMint); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.OneTimePrintingAuthorizationMint); err != nil {
		return err
	}
	return nil
}

// Metadata Struct
type Metadata struct {
	Key                 Key
	UpdateAuthority     common.PublicKey
	Mint                common.PublicKey
	Data                Data
	PrimarySaleHappened bool
	IsMutable           bool
	EditionNonce        *uint8              `bin:"optional"`
	TokenStandard       *TokenStandard      `bin:"optional"`
	Collection          *Collection         `bin:"optional"`
	Uses                *Uses               `bin:"optional"`
	CollectionDetails   *CollectionDetails  `bin:"optional"`
	ProgrammableConfig  *ProgrammableConfig `bin:"optional"`
}

func (obj *Metadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.UpdateAuthority); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Mint); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Data); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.PrimarySaleHappened); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.IsMutable); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.EditionNonce != nil); err != nil {
		return err
	}
	if obj.EditionNonce != nil {
		if err = encoder.Encode(obj.EditionNonce); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.TokenStandard != nil); err != nil {
		return err
	}
	if obj.TokenStandard != nil {
		if err = encoder.Encode(obj.TokenStandard); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.Collection != nil); err != nil {
		return err
	}
	if obj.Collection != nil {
		if err = encoder.Encode(obj.Collection); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.Uses != nil); err != nil {
		return err
	}
	if obj.Uses != nil {
		if err = encoder.Encode(obj.Uses); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.CollectionDetails != nil); err != nil {
		return err
	}
	if obj.CollectionDetails != nil {
		if err = encoder.Encode(obj.CollectionDetails); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.ProgrammableConfig != nil); err != nil {
		return err
	}
	if obj.ProgrammableConfig != nil {
		if err = encoder.Encode(obj.ProgrammableConfig); err != nil {
			return err
		}
	}
	return nil
}

func (obj *Metadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.UpdateAuthority); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Mint); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Data); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.PrimarySaleHappened); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.IsMutable); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.EditionNonce); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.TokenStandard); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Collection); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Uses); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.CollectionDetails); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.ProgrammableConfig); err != nil {
			return err
		}
	}
	return nil
}

// TokenRecord Struct
type TokenRecord struct {
	Key             Key
	Bump            uint8
	State           TokenState
	RuleSetRevision *uint64            `bin:"optional"`
	Delegate        *common.PublicKey  `bin:"optional"`
	DelegateRole    *TokenDelegateRole `bin:"optional"`
	LockedTransfer  *common.PublicKey  `bin:"optional"`
}

const TOKEN_RECORD_SIZE = 80

func (obj *TokenRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Bump); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.State); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.RuleSetRevision != nil); err != nil {
		return err
	}
	if obj.RuleSetRevision != nil {
		if err = encoder.Encode(obj.RuleSetRevision); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.Delegate != nil); err != nil {
		return err
	}
	if obj.Delegate != nil {
		if err = encoder.Encode(obj.Delegate); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.DelegateRole != nil); err != nil {
		return err
	}
	if obj.DelegateRole != nil {
		if err = encoder.Encode(obj.DelegateRole); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.LockedTransfer != nil); err != nil {
		return err
	}
	if obj.LockedTransfer != nil {
		if err = encoder.Encode(obj.LockedTransfer); err != nil {
			return err
		}
	}
	return nil
}

func (obj *TokenRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Bump); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.State); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.RuleSetRevision); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Delegate); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.DelegateRole); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.LockedTransfer); err != nil {
			return err
		}
	}
	return nil
}

// ReservationListV2 Struct
type ReservationListV2 struct {
	Key                     Key
	MasterEdition           common.PublicKey
	SupplySnapshot          *uint64 `bin:"optional"`
	Reservations            []Reservation
	TotalReservationSpots   uint64
	CurrentReservationSpots uint64
}

const RESERVATION_LIST_V2_SIZE = 106

func (obj *ReservationListV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.MasterEdition); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.SupplySnapshot != nil); err != nil {
		return err
	}
	if obj.SupplySnapshot != nil {
		if err = encoder.Encode(obj.SupplySnapshot); err != nil {
			return err
		}
	}
	if err = encoder.Encode(&obj.Reservations); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.TotalReservationSpots); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.CurrentReservationSpots); err != nil {
		return err
	}
	return nil
}

func (obj *ReservationListV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.MasterEdition); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.SupplySnapshot); err != nil {
			return err
		}
	}
	if err = decoder.Decode(&obj.Reservations); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.TotalReservationSpots); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.CurrentReservationSpots); err != nil {
		return err
	}
	return nil
}

// ReservationListV1 Struct
type ReservationListV1 struct {
	Key            Key
	MasterEdition  common.PublicKey
	SupplySnapshot *uint64 `bin:"optional"`
	Reservations   []ReservationV1
}

const RESERVATION_LIST_V1_SIZE = 76

func (obj *ReservationListV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.MasterEdition); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.SupplySnapshot != nil); err != nil {
		return err
	}
	if obj.SupplySnapshot != nil {
		if err = encoder.Encode(obj.SupplySnapshot); err != nil {
			return err
		}
	}
	if err = encoder.Encode(&obj.Reservations); err != nil {
		return err
	}
	return nil
}

func (obj *ReservationListV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.MasterEdition); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.SupplySnapshot); err != nil {
			return err
		}
	}
	if err = decoder.Decode(&obj.Reservations); err != nil {
		return err
	}
	return nil
}

// UseAuthorityRecord Struct
type UseAuthorityRecord struct {
	Key         Key
	AllowedUses uint64
	Bump        uint8
}

const USE_AUTHORITY_RECORD_SIZE = 10

func (obj *UseAuthorityRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.AllowedUses); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Bump); err != nil {
		return err
	}
	return nil
}

func (obj *UseAuthorityRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.AllowedUses); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Bump); err != nil {
		return err
	}
	return nil
}
