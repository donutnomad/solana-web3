// This code was AUTOGENERATED using the library.
// Please DO NOT EDIT THIS FILE.

package mpl_token_metadata

type ProgramError interface {
	Code() int
	Error() string
}

var codeToErrorMap = make(map[int]ProgramError)
var nameToErrorMap = make(map[string]ProgramError)

func init() {
	codeToErrorMap[0] = new(InstructionUnpackError)
	nameToErrorMap["InstructionUnpackError"] = new(InstructionUnpackError)
	codeToErrorMap[1] = new(InstructionPackError)
	nameToErrorMap["InstructionPackError"] = new(InstructionPackError)
	codeToErrorMap[2] = new(NotRentExemptError)
	nameToErrorMap["NotRentExempt"] = new(NotRentExemptError)
	codeToErrorMap[3] = new(AlreadyInitializedError)
	nameToErrorMap["AlreadyInitialized"] = new(AlreadyInitializedError)
	codeToErrorMap[4] = new(UninitializedError)
	nameToErrorMap["Uninitialized"] = new(UninitializedError)
	codeToErrorMap[5] = new(InvalidMetadataKeyError)
	nameToErrorMap["InvalidMetadataKey"] = new(InvalidMetadataKeyError)
	codeToErrorMap[6] = new(InvalidEditionKeyError)
	nameToErrorMap["InvalidEditionKey"] = new(InvalidEditionKeyError)
	codeToErrorMap[7] = new(UpdateAuthorityIncorrectError)
	nameToErrorMap["UpdateAuthorityIncorrect"] = new(UpdateAuthorityIncorrectError)
	codeToErrorMap[8] = new(UpdateAuthorityIsNotSignerError)
	nameToErrorMap["UpdateAuthorityIsNotSigner"] = new(UpdateAuthorityIsNotSignerError)
	codeToErrorMap[9] = new(NotMintAuthorityError)
	nameToErrorMap["NotMintAuthority"] = new(NotMintAuthorityError)
	codeToErrorMap[10] = new(InvalidMintAuthorityError)
	nameToErrorMap["InvalidMintAuthority"] = new(InvalidMintAuthorityError)
	codeToErrorMap[11] = new(NameTooLongError)
	nameToErrorMap["NameTooLong"] = new(NameTooLongError)
	codeToErrorMap[12] = new(SymbolTooLongError)
	nameToErrorMap["SymbolTooLong"] = new(SymbolTooLongError)
	codeToErrorMap[13] = new(UriTooLongError)
	nameToErrorMap["UriTooLong"] = new(UriTooLongError)
	codeToErrorMap[14] = new(UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError)
	nameToErrorMap["UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner"] = new(UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError)
	codeToErrorMap[15] = new(MintMismatchError)
	nameToErrorMap["MintMismatch"] = new(MintMismatchError)
	codeToErrorMap[16] = new(EditionsMustHaveExactlyOneTokenError)
	nameToErrorMap["EditionsMustHaveExactlyOneToken"] = new(EditionsMustHaveExactlyOneTokenError)
	codeToErrorMap[17] = new(MaxEditionsMintedAlreadyError)
	nameToErrorMap["MaxEditionsMintedAlready"] = new(MaxEditionsMintedAlreadyError)
	codeToErrorMap[18] = new(TokenMintToFailedError)
	nameToErrorMap["TokenMintToFailed"] = new(TokenMintToFailedError)
	codeToErrorMap[19] = new(MasterRecordMismatchError)
	nameToErrorMap["MasterRecordMismatch"] = new(MasterRecordMismatchError)
	codeToErrorMap[20] = new(DestinationMintMismatchError)
	nameToErrorMap["DestinationMintMismatch"] = new(DestinationMintMismatchError)
	codeToErrorMap[21] = new(EditionAlreadyMintedError)
	nameToErrorMap["EditionAlreadyMinted"] = new(EditionAlreadyMintedError)
	codeToErrorMap[22] = new(PrintingMintDecimalsShouldBeZeroError)
	nameToErrorMap["PrintingMintDecimalsShouldBeZero"] = new(PrintingMintDecimalsShouldBeZeroError)
	codeToErrorMap[23] = new(OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError)
	nameToErrorMap["OneTimePrintingAuthorizationMintDecimalsShouldBeZero"] = new(OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError)
	codeToErrorMap[24] = new(EditionMintDecimalsShouldBeZeroError)
	nameToErrorMap["EditionMintDecimalsShouldBeZero"] = new(EditionMintDecimalsShouldBeZeroError)
	codeToErrorMap[25] = new(TokenBurnFailedError)
	nameToErrorMap["TokenBurnFailed"] = new(TokenBurnFailedError)
	codeToErrorMap[26] = new(TokenAccountOneTimeAuthMintMismatchError)
	nameToErrorMap["TokenAccountOneTimeAuthMintMismatch"] = new(TokenAccountOneTimeAuthMintMismatchError)
	codeToErrorMap[27] = new(DerivedKeyInvalidError)
	nameToErrorMap["DerivedKeyInvalid"] = new(DerivedKeyInvalidError)
	codeToErrorMap[28] = new(PrintingMintMismatchError)
	nameToErrorMap["PrintingMintMismatch"] = new(PrintingMintMismatchError)
	codeToErrorMap[29] = new(OneTimePrintingAuthMintMismatchError)
	nameToErrorMap["OneTimePrintingAuthMintMismatch"] = new(OneTimePrintingAuthMintMismatchError)
	codeToErrorMap[30] = new(TokenAccountMintMismatchError)
	nameToErrorMap["TokenAccountMintMismatch"] = new(TokenAccountMintMismatchError)
	codeToErrorMap[31] = new(TokenAccountMintMismatchV2Error)
	nameToErrorMap["TokenAccountMintMismatchV2"] = new(TokenAccountMintMismatchV2Error)
	codeToErrorMap[32] = new(NotEnoughTokensError)
	nameToErrorMap["NotEnoughTokens"] = new(NotEnoughTokensError)
	codeToErrorMap[33] = new(PrintingMintAuthorizationAccountMismatchError)
	nameToErrorMap["PrintingMintAuthorizationAccountMismatch"] = new(PrintingMintAuthorizationAccountMismatchError)
	codeToErrorMap[34] = new(AuthorizationTokenAccountOwnerMismatchError)
	nameToErrorMap["AuthorizationTokenAccountOwnerMismatch"] = new(AuthorizationTokenAccountOwnerMismatchError)
	codeToErrorMap[35] = new(DisabledError)
	nameToErrorMap["Disabled"] = new(DisabledError)
	codeToErrorMap[36] = new(CreatorsTooLongError)
	nameToErrorMap["CreatorsTooLong"] = new(CreatorsTooLongError)
	codeToErrorMap[37] = new(CreatorsMustBeAtleastOneError)
	nameToErrorMap["CreatorsMustBeAtleastOne"] = new(CreatorsMustBeAtleastOneError)
	codeToErrorMap[38] = new(MustBeOneOfCreatorsError)
	nameToErrorMap["MustBeOneOfCreators"] = new(MustBeOneOfCreatorsError)
	codeToErrorMap[39] = new(NoCreatorsPresentOnMetadataError)
	nameToErrorMap["NoCreatorsPresentOnMetadata"] = new(NoCreatorsPresentOnMetadataError)
	codeToErrorMap[40] = new(CreatorNotFoundError)
	nameToErrorMap["CreatorNotFound"] = new(CreatorNotFoundError)
	codeToErrorMap[41] = new(InvalidBasisPointsError)
	nameToErrorMap["InvalidBasisPoints"] = new(InvalidBasisPointsError)
	codeToErrorMap[42] = new(PrimarySaleCanOnlyBeFlippedToTrueError)
	nameToErrorMap["PrimarySaleCanOnlyBeFlippedToTrue"] = new(PrimarySaleCanOnlyBeFlippedToTrueError)
	codeToErrorMap[43] = new(OwnerMismatchError)
	nameToErrorMap["OwnerMismatch"] = new(OwnerMismatchError)
	codeToErrorMap[44] = new(NoBalanceInAccountForAuthorizationError)
	nameToErrorMap["NoBalanceInAccountForAuthorization"] = new(NoBalanceInAccountForAuthorizationError)
	codeToErrorMap[45] = new(ShareTotalMustBe100Error)
	nameToErrorMap["ShareTotalMustBe100"] = new(ShareTotalMustBe100Error)
	codeToErrorMap[46] = new(ReservationExistsError)
	nameToErrorMap["ReservationExists"] = new(ReservationExistsError)
	codeToErrorMap[47] = new(ReservationDoesNotExistError)
	nameToErrorMap["ReservationDoesNotExist"] = new(ReservationDoesNotExistError)
	codeToErrorMap[48] = new(ReservationNotSetError)
	nameToErrorMap["ReservationNotSet"] = new(ReservationNotSetError)
	codeToErrorMap[49] = new(ReservationAlreadyMadeError)
	nameToErrorMap["ReservationAlreadyMade"] = new(ReservationAlreadyMadeError)
	codeToErrorMap[50] = new(BeyondMaxAddressSizeError)
	nameToErrorMap["BeyondMaxAddressSize"] = new(BeyondMaxAddressSizeError)
	codeToErrorMap[51] = new(NumericalOverflowError)
	nameToErrorMap["NumericalOverflowError"] = new(NumericalOverflowError)
	codeToErrorMap[52] = new(ReservationBreachesMaximumSupplyError)
	nameToErrorMap["ReservationBreachesMaximumSupply"] = new(ReservationBreachesMaximumSupplyError)
	codeToErrorMap[53] = new(AddressNotInReservationError)
	nameToErrorMap["AddressNotInReservation"] = new(AddressNotInReservationError)
	codeToErrorMap[54] = new(CannotVerifyAnotherCreatorError)
	nameToErrorMap["CannotVerifyAnotherCreator"] = new(CannotVerifyAnotherCreatorError)
	codeToErrorMap[55] = new(CannotUnverifyAnotherCreatorError)
	nameToErrorMap["CannotUnverifyAnotherCreator"] = new(CannotUnverifyAnotherCreatorError)
	codeToErrorMap[56] = new(SpotMismatchError)
	nameToErrorMap["SpotMismatch"] = new(SpotMismatchError)
	codeToErrorMap[57] = new(IncorrectOwnerError)
	nameToErrorMap["IncorrectOwner"] = new(IncorrectOwnerError)
	codeToErrorMap[58] = new(PrintingWouldBreachMaximumSupplyError)
	nameToErrorMap["PrintingWouldBreachMaximumSupply"] = new(PrintingWouldBreachMaximumSupplyError)
	codeToErrorMap[59] = new(DataIsImmutableError)
	nameToErrorMap["DataIsImmutable"] = new(DataIsImmutableError)
	codeToErrorMap[60] = new(DuplicateCreatorAddressError)
	nameToErrorMap["DuplicateCreatorAddress"] = new(DuplicateCreatorAddressError)
	codeToErrorMap[61] = new(ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError)
	nameToErrorMap["ReservationSpotsRemainingShouldMatchTotalSpotsAtStart"] = new(ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError)
	codeToErrorMap[62] = new(InvalidTokenProgramError)
	nameToErrorMap["InvalidTokenProgram"] = new(InvalidTokenProgramError)
	codeToErrorMap[63] = new(DataTypeMismatchError)
	nameToErrorMap["DataTypeMismatch"] = new(DataTypeMismatchError)
	codeToErrorMap[64] = new(BeyondAlottedAddressSizeError)
	nameToErrorMap["BeyondAlottedAddressSize"] = new(BeyondAlottedAddressSizeError)
	codeToErrorMap[65] = new(ReservationNotCompleteError)
	nameToErrorMap["ReservationNotComplete"] = new(ReservationNotCompleteError)
	codeToErrorMap[66] = new(TriedToReplaceAnExistingReservationError)
	nameToErrorMap["TriedToReplaceAnExistingReservation"] = new(TriedToReplaceAnExistingReservationError)
	codeToErrorMap[67] = new(InvalidOperationError)
	nameToErrorMap["InvalidOperation"] = new(InvalidOperationError)
	codeToErrorMap[68] = new(InvalidOwnerError)
	nameToErrorMap["InvalidOwner"] = new(InvalidOwnerError)
	codeToErrorMap[69] = new(PrintingMintSupplyMustBeZeroForConversionError)
	nameToErrorMap["PrintingMintSupplyMustBeZeroForConversion"] = new(PrintingMintSupplyMustBeZeroForConversionError)
	codeToErrorMap[70] = new(OneTimeAuthMintSupplyMustBeZeroForConversionError)
	nameToErrorMap["OneTimeAuthMintSupplyMustBeZeroForConversion"] = new(OneTimeAuthMintSupplyMustBeZeroForConversionError)
	codeToErrorMap[71] = new(InvalidEditionIndexError)
	nameToErrorMap["InvalidEditionIndex"] = new(InvalidEditionIndexError)
	codeToErrorMap[72] = new(ReservationArrayShouldBeSizeOneError)
	nameToErrorMap["ReservationArrayShouldBeSizeOne"] = new(ReservationArrayShouldBeSizeOneError)
	codeToErrorMap[73] = new(IsMutableCanOnlyBeFlippedToFalseError)
	nameToErrorMap["IsMutableCanOnlyBeFlippedToFalse"] = new(IsMutableCanOnlyBeFlippedToFalseError)
	codeToErrorMap[74] = new(CollectionCannotBeVerifiedInThisInstructionError)
	nameToErrorMap["CollectionCannotBeVerifiedInThisInstruction"] = new(CollectionCannotBeVerifiedInThisInstructionError)
	codeToErrorMap[75] = new(RemovedError)
	nameToErrorMap["Removed"] = new(RemovedError)
	codeToErrorMap[76] = new(MustBeBurnedError)
	nameToErrorMap["MustBeBurned"] = new(MustBeBurnedError)
	codeToErrorMap[77] = new(InvalidUseMethodError)
	nameToErrorMap["InvalidUseMethod"] = new(InvalidUseMethodError)
	codeToErrorMap[78] = new(CannotChangeUseMethodAfterFirstUseError)
	nameToErrorMap["CannotChangeUseMethodAfterFirstUse"] = new(CannotChangeUseMethodAfterFirstUseError)
	codeToErrorMap[79] = new(CannotChangeUsesAfterFirstUseError)
	nameToErrorMap["CannotChangeUsesAfterFirstUse"] = new(CannotChangeUsesAfterFirstUseError)
	codeToErrorMap[80] = new(CollectionNotFoundError)
	nameToErrorMap["CollectionNotFound"] = new(CollectionNotFoundError)
	codeToErrorMap[81] = new(InvalidCollectionUpdateAuthorityError)
	nameToErrorMap["InvalidCollectionUpdateAuthority"] = new(InvalidCollectionUpdateAuthorityError)
	codeToErrorMap[82] = new(CollectionMustBeAUniqueMasterEditionError)
	nameToErrorMap["CollectionMustBeAUniqueMasterEdition"] = new(CollectionMustBeAUniqueMasterEditionError)
	codeToErrorMap[83] = new(UseAuthorityRecordAlreadyExistsError)
	nameToErrorMap["UseAuthorityRecordAlreadyExists"] = new(UseAuthorityRecordAlreadyExistsError)
	codeToErrorMap[84] = new(UseAuthorityRecordAlreadyRevokedError)
	nameToErrorMap["UseAuthorityRecordAlreadyRevoked"] = new(UseAuthorityRecordAlreadyRevokedError)
	codeToErrorMap[85] = new(UnusableError)
	nameToErrorMap["Unusable"] = new(UnusableError)
	codeToErrorMap[86] = new(NotEnoughUsesError)
	nameToErrorMap["NotEnoughUses"] = new(NotEnoughUsesError)
	codeToErrorMap[87] = new(CollectionAuthorityRecordAlreadyExistsError)
	nameToErrorMap["CollectionAuthorityRecordAlreadyExists"] = new(CollectionAuthorityRecordAlreadyExistsError)
	codeToErrorMap[88] = new(CollectionAuthorityDoesNotExistError)
	nameToErrorMap["CollectionAuthorityDoesNotExist"] = new(CollectionAuthorityDoesNotExistError)
	codeToErrorMap[89] = new(InvalidUseAuthorityRecordError)
	nameToErrorMap["InvalidUseAuthorityRecord"] = new(InvalidUseAuthorityRecordError)
	codeToErrorMap[90] = new(InvalidCollectionAuthorityRecordError)
	nameToErrorMap["InvalidCollectionAuthorityRecord"] = new(InvalidCollectionAuthorityRecordError)
	codeToErrorMap[91] = new(InvalidFreezeAuthorityError)
	nameToErrorMap["InvalidFreezeAuthority"] = new(InvalidFreezeAuthorityError)
	codeToErrorMap[92] = new(InvalidDelegateError)
	nameToErrorMap["InvalidDelegate"] = new(InvalidDelegateError)
	codeToErrorMap[93] = new(CannotAdjustVerifiedCreatorError)
	nameToErrorMap["CannotAdjustVerifiedCreator"] = new(CannotAdjustVerifiedCreatorError)
	codeToErrorMap[94] = new(CannotRemoveVerifiedCreatorError)
	nameToErrorMap["CannotRemoveVerifiedCreator"] = new(CannotRemoveVerifiedCreatorError)
	codeToErrorMap[95] = new(CannotWipeVerifiedCreatorsError)
	nameToErrorMap["CannotWipeVerifiedCreators"] = new(CannotWipeVerifiedCreatorsError)
	codeToErrorMap[96] = new(NotAllowedToChangeSellerFeeBasisPointsError)
	nameToErrorMap["NotAllowedToChangeSellerFeeBasisPoints"] = new(NotAllowedToChangeSellerFeeBasisPointsError)
	codeToErrorMap[97] = new(EditionOverrideCannotBeZeroError)
	nameToErrorMap["EditionOverrideCannotBeZero"] = new(EditionOverrideCannotBeZeroError)
	codeToErrorMap[98] = new(InvalidUserError)
	nameToErrorMap["InvalidUser"] = new(InvalidUserError)
	codeToErrorMap[99] = new(RevokeCollectionAuthoritySignerIncorrectError)
	nameToErrorMap["RevokeCollectionAuthoritySignerIncorrect"] = new(RevokeCollectionAuthoritySignerIncorrectError)
	codeToErrorMap[100] = new(TokenCloseFailedError)
	nameToErrorMap["TokenCloseFailed"] = new(TokenCloseFailedError)
	codeToErrorMap[101] = new(UnsizedCollectionError)
	nameToErrorMap["UnsizedCollection"] = new(UnsizedCollectionError)
	codeToErrorMap[102] = new(SizedCollectionError)
	nameToErrorMap["SizedCollection"] = new(SizedCollectionError)
	codeToErrorMap[103] = new(MissingCollectionMetadataError)
	nameToErrorMap["MissingCollectionMetadata"] = new(MissingCollectionMetadataError)
	codeToErrorMap[104] = new(NotAMemberOfCollectionError)
	nameToErrorMap["NotAMemberOfCollection"] = new(NotAMemberOfCollectionError)
	codeToErrorMap[105] = new(NotVerifiedMemberOfCollectionError)
	nameToErrorMap["NotVerifiedMemberOfCollection"] = new(NotVerifiedMemberOfCollectionError)
	codeToErrorMap[106] = new(NotACollectionParentError)
	nameToErrorMap["NotACollectionParent"] = new(NotACollectionParentError)
	codeToErrorMap[107] = new(CouldNotDetermineTokenStandardError)
	nameToErrorMap["CouldNotDetermineTokenStandard"] = new(CouldNotDetermineTokenStandardError)
	codeToErrorMap[108] = new(MissingEditionAccountError)
	nameToErrorMap["MissingEditionAccount"] = new(MissingEditionAccountError)
	codeToErrorMap[109] = new(NotAMasterEditionError)
	nameToErrorMap["NotAMasterEdition"] = new(NotAMasterEditionError)
	codeToErrorMap[110] = new(MasterEditionHasPrintsError)
	nameToErrorMap["MasterEditionHasPrints"] = new(MasterEditionHasPrintsError)
	codeToErrorMap[111] = new(BorshDeserializationError)
	nameToErrorMap["BorshDeserializationError"] = new(BorshDeserializationError)
	codeToErrorMap[112] = new(CannotUpdateVerifiedCollectionError)
	nameToErrorMap["CannotUpdateVerifiedCollection"] = new(CannotUpdateVerifiedCollectionError)
	codeToErrorMap[113] = new(CollectionMasterEditionAccountInvalidError)
	nameToErrorMap["CollectionMasterEditionAccountInvalid"] = new(CollectionMasterEditionAccountInvalidError)
	codeToErrorMap[114] = new(AlreadyVerifiedError)
	nameToErrorMap["AlreadyVerified"] = new(AlreadyVerifiedError)
	codeToErrorMap[115] = new(AlreadyUnverifiedError)
	nameToErrorMap["AlreadyUnverified"] = new(AlreadyUnverifiedError)
	codeToErrorMap[116] = new(NotAPrintEditionError)
	nameToErrorMap["NotAPrintEdition"] = new(NotAPrintEditionError)
	codeToErrorMap[117] = new(InvalidMasterEditionError)
	nameToErrorMap["InvalidMasterEdition"] = new(InvalidMasterEditionError)
	codeToErrorMap[118] = new(InvalidPrintEditionError)
	nameToErrorMap["InvalidPrintEdition"] = new(InvalidPrintEditionError)
	codeToErrorMap[119] = new(InvalidEditionMarkerError)
	nameToErrorMap["InvalidEditionMarker"] = new(InvalidEditionMarkerError)
	codeToErrorMap[120] = new(ReservationListDeprecatedError)
	nameToErrorMap["ReservationListDeprecated"] = new(ReservationListDeprecatedError)
	codeToErrorMap[121] = new(PrintEditionDoesNotMatchMasterEditionError)
	nameToErrorMap["PrintEditionDoesNotMatchMasterEdition"] = new(PrintEditionDoesNotMatchMasterEditionError)
	codeToErrorMap[122] = new(EditionNumberGreaterThanMaxSupplyError)
	nameToErrorMap["EditionNumberGreaterThanMaxSupply"] = new(EditionNumberGreaterThanMaxSupplyError)
	codeToErrorMap[123] = new(MustUnverifyError)
	nameToErrorMap["MustUnverify"] = new(MustUnverifyError)
	codeToErrorMap[124] = new(InvalidEscrowBumpSeedError)
	nameToErrorMap["InvalidEscrowBumpSeed"] = new(InvalidEscrowBumpSeedError)
	codeToErrorMap[125] = new(MustBeEscrowAuthorityError)
	nameToErrorMap["MustBeEscrowAuthority"] = new(MustBeEscrowAuthorityError)
	codeToErrorMap[126] = new(InvalidSystemProgramError)
	nameToErrorMap["InvalidSystemProgram"] = new(InvalidSystemProgramError)
	codeToErrorMap[127] = new(MustBeNonFungibleError)
	nameToErrorMap["MustBeNonFungible"] = new(MustBeNonFungibleError)
	codeToErrorMap[128] = new(InsufficientTokensError)
	nameToErrorMap["InsufficientTokens"] = new(InsufficientTokensError)
	codeToErrorMap[129] = new(BorshSerializationError)
	nameToErrorMap["BorshSerializationError"] = new(BorshSerializationError)
	codeToErrorMap[130] = new(NoFreezeAuthoritySetError)
	nameToErrorMap["NoFreezeAuthoritySet"] = new(NoFreezeAuthoritySetError)
	codeToErrorMap[131] = new(InvalidCollectionSizeChangeError)
	nameToErrorMap["InvalidCollectionSizeChange"] = new(InvalidCollectionSizeChangeError)
	codeToErrorMap[132] = new(InvalidBubblegumSignerError)
	nameToErrorMap["InvalidBubblegumSigner"] = new(InvalidBubblegumSignerError)
	codeToErrorMap[133] = new(EscrowParentHasDelegateError)
	nameToErrorMap["EscrowParentHasDelegate"] = new(EscrowParentHasDelegateError)
	codeToErrorMap[134] = new(MintIsNotSignerError)
	nameToErrorMap["MintIsNotSigner"] = new(MintIsNotSignerError)
	codeToErrorMap[135] = new(InvalidTokenStandardError)
	nameToErrorMap["InvalidTokenStandard"] = new(InvalidTokenStandardError)
	codeToErrorMap[136] = new(InvalidMintForTokenStandardError)
	nameToErrorMap["InvalidMintForTokenStandard"] = new(InvalidMintForTokenStandardError)
	codeToErrorMap[137] = new(InvalidAuthorizationRulesError)
	nameToErrorMap["InvalidAuthorizationRules"] = new(InvalidAuthorizationRulesError)
	codeToErrorMap[138] = new(MissingAuthorizationRulesError)
	nameToErrorMap["MissingAuthorizationRules"] = new(MissingAuthorizationRulesError)
	codeToErrorMap[139] = new(MissingProgrammableConfigError)
	nameToErrorMap["MissingProgrammableConfig"] = new(MissingProgrammableConfigError)
	codeToErrorMap[140] = new(InvalidProgrammableConfigError)
	nameToErrorMap["InvalidProgrammableConfig"] = new(InvalidProgrammableConfigError)
	codeToErrorMap[141] = new(DelegateAlreadyExistsError)
	nameToErrorMap["DelegateAlreadyExists"] = new(DelegateAlreadyExistsError)
	codeToErrorMap[142] = new(DelegateNotFoundError)
	nameToErrorMap["DelegateNotFound"] = new(DelegateNotFoundError)
	codeToErrorMap[143] = new(MissingAccountInBuilderError)
	nameToErrorMap["MissingAccountInBuilder"] = new(MissingAccountInBuilderError)
	codeToErrorMap[144] = new(MissingArgumentInBuilderError)
	nameToErrorMap["MissingArgumentInBuilder"] = new(MissingArgumentInBuilderError)
	codeToErrorMap[145] = new(FeatureNotSupportedError)
	nameToErrorMap["FeatureNotSupported"] = new(FeatureNotSupportedError)
	codeToErrorMap[146] = new(InvalidSystemWalletError)
	nameToErrorMap["InvalidSystemWallet"] = new(InvalidSystemWalletError)
	codeToErrorMap[147] = new(OnlySaleDelegateCanTransferError)
	nameToErrorMap["OnlySaleDelegateCanTransfer"] = new(OnlySaleDelegateCanTransferError)
	codeToErrorMap[148] = new(MissingTokenAccountError)
	nameToErrorMap["MissingTokenAccount"] = new(MissingTokenAccountError)
	codeToErrorMap[149] = new(MissingSplTokenProgramError)
	nameToErrorMap["MissingSplTokenProgram"] = new(MissingSplTokenProgramError)
	codeToErrorMap[150] = new(MissingAuthorizationRulesProgramError)
	nameToErrorMap["MissingAuthorizationRulesProgram"] = new(MissingAuthorizationRulesProgramError)
	codeToErrorMap[151] = new(InvalidDelegateRoleForTransferError)
	nameToErrorMap["InvalidDelegateRoleForTransfer"] = new(InvalidDelegateRoleForTransferError)
	codeToErrorMap[152] = new(InvalidTransferAuthorityError)
	nameToErrorMap["InvalidTransferAuthority"] = new(InvalidTransferAuthorityError)
	codeToErrorMap[153] = new(InstructionNotSupportedError)
	nameToErrorMap["InstructionNotSupported"] = new(InstructionNotSupportedError)
	codeToErrorMap[154] = new(KeyMismatchError)
	nameToErrorMap["KeyMismatch"] = new(KeyMismatchError)
	codeToErrorMap[155] = new(LockedTokenError)
	nameToErrorMap["LockedToken"] = new(LockedTokenError)
	codeToErrorMap[156] = new(UnlockedTokenError)
	nameToErrorMap["UnlockedToken"] = new(UnlockedTokenError)
	codeToErrorMap[157] = new(MissingDelegateRoleError)
	nameToErrorMap["MissingDelegateRole"] = new(MissingDelegateRoleError)
	codeToErrorMap[158] = new(InvalidAuthorityTypeError)
	nameToErrorMap["InvalidAuthorityType"] = new(InvalidAuthorityTypeError)
	codeToErrorMap[159] = new(MissingTokenRecordError)
	nameToErrorMap["MissingTokenRecord"] = new(MissingTokenRecordError)
	codeToErrorMap[160] = new(MintSupplyMustBeZeroError)
	nameToErrorMap["MintSupplyMustBeZero"] = new(MintSupplyMustBeZeroError)
	codeToErrorMap[161] = new(DataIsEmptyOrZeroedError)
	nameToErrorMap["DataIsEmptyOrZeroed"] = new(DataIsEmptyOrZeroedError)
	codeToErrorMap[162] = new(MissingTokenOwnerAccountError)
	nameToErrorMap["MissingTokenOwnerAccount"] = new(MissingTokenOwnerAccountError)
	codeToErrorMap[163] = new(InvalidMasterEditionAccountLengthError)
	nameToErrorMap["InvalidMasterEditionAccountLength"] = new(InvalidMasterEditionAccountLengthError)
	codeToErrorMap[164] = new(IncorrectTokenStateError)
	nameToErrorMap["IncorrectTokenState"] = new(IncorrectTokenStateError)
	codeToErrorMap[165] = new(InvalidDelegateRoleError)
	nameToErrorMap["InvalidDelegateRole"] = new(InvalidDelegateRoleError)
	codeToErrorMap[166] = new(MissingPrintSupplyError)
	nameToErrorMap["MissingPrintSupply"] = new(MissingPrintSupplyError)
	codeToErrorMap[167] = new(MissingMasterEditionAccountError)
	nameToErrorMap["MissingMasterEditionAccount"] = new(MissingMasterEditionAccountError)
	codeToErrorMap[168] = new(AmountMustBeGreaterThanZeroError)
	nameToErrorMap["AmountMustBeGreaterThanZero"] = new(AmountMustBeGreaterThanZeroError)
	codeToErrorMap[169] = new(InvalidDelegateArgsError)
	nameToErrorMap["InvalidDelegateArgs"] = new(InvalidDelegateArgsError)
	codeToErrorMap[170] = new(MissingLockedTransferAddressError)
	nameToErrorMap["MissingLockedTransferAddress"] = new(MissingLockedTransferAddressError)
	codeToErrorMap[171] = new(InvalidLockedTransferAddressError)
	nameToErrorMap["InvalidLockedTransferAddress"] = new(InvalidLockedTransferAddressError)
	codeToErrorMap[172] = new(DataIncrementLimitExceededError)
	nameToErrorMap["DataIncrementLimitExceeded"] = new(DataIncrementLimitExceededError)
	codeToErrorMap[173] = new(CannotUpdateAssetWithDelegateError)
	nameToErrorMap["CannotUpdateAssetWithDelegate"] = new(CannotUpdateAssetWithDelegateError)
	codeToErrorMap[174] = new(InvalidAmountError)
	nameToErrorMap["InvalidAmount"] = new(InvalidAmountError)
	codeToErrorMap[175] = new(MissingMasterEditionMintAccountError)
	nameToErrorMap["MissingMasterEditionMintAccount"] = new(MissingMasterEditionMintAccountError)
	codeToErrorMap[176] = new(MissingMasterEditionTokenAccountError)
	nameToErrorMap["MissingMasterEditionTokenAccount"] = new(MissingMasterEditionTokenAccountError)
	codeToErrorMap[177] = new(MissingEditionMarkerAccountError)
	nameToErrorMap["MissingEditionMarkerAccount"] = new(MissingEditionMarkerAccountError)
	codeToErrorMap[178] = new(CannotBurnWithDelegateError)
	nameToErrorMap["CannotBurnWithDelegate"] = new(CannotBurnWithDelegateError)
	codeToErrorMap[179] = new(MissingEditionError)
	nameToErrorMap["MissingEdition"] = new(MissingEditionError)
	codeToErrorMap[180] = new(InvalidAssociatedTokenAccountProgramError)
	nameToErrorMap["InvalidAssociatedTokenAccountProgram"] = new(InvalidAssociatedTokenAccountProgramError)
	codeToErrorMap[181] = new(InvalidInstructionsSysvarError)
	nameToErrorMap["InvalidInstructionsSysvar"] = new(InvalidInstructionsSysvarError)
	codeToErrorMap[182] = new(InvalidParentAccountsError)
	nameToErrorMap["InvalidParentAccounts"] = new(InvalidParentAccountsError)
	codeToErrorMap[183] = new(InvalidUpdateArgsError)
	nameToErrorMap["InvalidUpdateArgs"] = new(InvalidUpdateArgsError)
	codeToErrorMap[184] = new(InsufficientTokenBalanceError)
	nameToErrorMap["InsufficientTokenBalance"] = new(InsufficientTokenBalanceError)
	codeToErrorMap[185] = new(MissingCollectionMintError)
	nameToErrorMap["MissingCollectionMint"] = new(MissingCollectionMintError)
	codeToErrorMap[186] = new(MissingCollectionMasterEditionError)
	nameToErrorMap["MissingCollectionMasterEdition"] = new(MissingCollectionMasterEditionError)
	codeToErrorMap[187] = new(InvalidTokenRecordError)
	nameToErrorMap["InvalidTokenRecord"] = new(InvalidTokenRecordError)
	codeToErrorMap[188] = new(InvalidCloseAuthorityError)
	nameToErrorMap["InvalidCloseAuthority"] = new(InvalidCloseAuthorityError)
	codeToErrorMap[189] = new(InvalidInstructionError)
	nameToErrorMap["InvalidInstruction"] = new(InvalidInstructionError)
	codeToErrorMap[190] = new(MissingDelegateRecordError)
	nameToErrorMap["MissingDelegateRecord"] = new(MissingDelegateRecordError)
	codeToErrorMap[191] = new(InvalidFeeAccountError)
	nameToErrorMap["InvalidFeeAccount"] = new(InvalidFeeAccountError)
	codeToErrorMap[192] = new(InvalidMetadataFlagsError)
	nameToErrorMap["InvalidMetadataFlags"] = new(InvalidMetadataFlagsError)
	codeToErrorMap[193] = new(CannotChangeUpdateAuthorityWithDelegateError)
	nameToErrorMap["CannotChangeUpdateAuthorityWithDelegate"] = new(CannotChangeUpdateAuthorityWithDelegateError)
	codeToErrorMap[194] = new(InvalidMintExtensionTypeError)
	nameToErrorMap["InvalidMintExtensionType"] = new(InvalidMintExtensionTypeError)
	codeToErrorMap[195] = new(InvalidMintCloseAuthorityError)
	nameToErrorMap["InvalidMintCloseAuthority"] = new(InvalidMintCloseAuthorityError)
	codeToErrorMap[196] = new(InvalidMetadataPointerError)
	nameToErrorMap["InvalidMetadataPointer"] = new(InvalidMetadataPointerError)
	codeToErrorMap[197] = new(InvalidTokenExtensionTypeError)
	nameToErrorMap["InvalidTokenExtensionType"] = new(InvalidTokenExtensionTypeError)
	codeToErrorMap[198] = new(MissingImmutableOwnerExtensionError)
	nameToErrorMap["MissingImmutableOwnerExtension"] = new(MissingImmutableOwnerExtensionError)
}

func GetMplTokenMetadataErrorFromCode(code int) ProgramError {
	return codeToErrorMap[code]
}

func GetMplTokenMetadataErrorFromName(name string) ProgramError {
	return nameToErrorMap[name]
}

// InstructionUnpackError Error: 0 “
type InstructionUnpackError struct{}

func (e InstructionUnpackError) Code() int {
	return 0
}
func (e InstructionUnpackError) Error() string {
	return ""
}

// InstructionPackError Error: 1 “
type InstructionPackError struct{}

func (e InstructionPackError) Code() int {
	return 1
}
func (e InstructionPackError) Error() string {
	return ""
}

// NotRentExemptError Error: 2 `Lamport balance below rent-exempt threshold`
type NotRentExemptError struct{}

func (e NotRentExemptError) Code() int {
	return 2
}
func (e NotRentExemptError) Error() string {
	return "Lamport balance below rent-exempt threshold"
}

// AlreadyInitializedError Error: 3 `Already initialized`
type AlreadyInitializedError struct{}

func (e AlreadyInitializedError) Code() int {
	return 3
}
func (e AlreadyInitializedError) Error() string {
	return "Already initialized"
}

// UninitializedError Error: 4 `Uninitialized`
type UninitializedError struct{}

func (e UninitializedError) Code() int {
	return 4
}
func (e UninitializedError) Error() string {
	return "Uninitialized"
}

// InvalidMetadataKeyError Error: 5 ` Metadata's key must match seed of ['metadata', program id, mint] provided`
type InvalidMetadataKeyError struct{}

func (e InvalidMetadataKeyError) Code() int {
	return 5
}
func (e InvalidMetadataKeyError) Error() string {
	return " Metadata's key must match seed of ['metadata', program id, mint] provided"
}

// InvalidEditionKeyError Error: 6 `Edition's key must match seed of ['metadata', program id, name, 'edition'] provided`
type InvalidEditionKeyError struct{}

func (e InvalidEditionKeyError) Code() int {
	return 6
}
func (e InvalidEditionKeyError) Error() string {
	return "Edition's key must match seed of ['metadata', program id, name, 'edition'] provided"
}

// UpdateAuthorityIncorrectError Error: 7 `Update Authority given does not match`
type UpdateAuthorityIncorrectError struct{}

func (e UpdateAuthorityIncorrectError) Code() int {
	return 7
}
func (e UpdateAuthorityIncorrectError) Error() string {
	return "Update Authority given does not match"
}

// UpdateAuthorityIsNotSignerError Error: 8 `Update Authority needs to be signer to update metadata`
type UpdateAuthorityIsNotSignerError struct{}

func (e UpdateAuthorityIsNotSignerError) Code() int {
	return 8
}
func (e UpdateAuthorityIsNotSignerError) Error() string {
	return "Update Authority needs to be signer to update metadata"
}

// NotMintAuthorityError Error: 9 `You must be the mint authority and signer on this transaction`
type NotMintAuthorityError struct{}

func (e NotMintAuthorityError) Code() int {
	return 9
}
func (e NotMintAuthorityError) Error() string {
	return "You must be the mint authority and signer on this transaction"
}

// InvalidMintAuthorityError Error: 10 `Mint authority provided does not match the authority on the mint`
type InvalidMintAuthorityError struct{}

func (e InvalidMintAuthorityError) Code() int {
	return 10
}
func (e InvalidMintAuthorityError) Error() string {
	return "Mint authority provided does not match the authority on the mint"
}

// NameTooLongError Error: 11 `Name too long`
type NameTooLongError struct{}

func (e NameTooLongError) Code() int {
	return 11
}
func (e NameTooLongError) Error() string {
	return "Name too long"
}

// SymbolTooLongError Error: 12 `Symbol too long`
type SymbolTooLongError struct{}

func (e SymbolTooLongError) Code() int {
	return 12
}
func (e SymbolTooLongError) Error() string {
	return "Symbol too long"
}

// UriTooLongError Error: 13 `URI too long`
type UriTooLongError struct{}

func (e UriTooLongError) Code() int {
	return 13
}
func (e UriTooLongError) Error() string {
	return "URI too long"
}

// UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError Error: 14 “
type UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError struct{}

func (e UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError) Code() int {
	return 14
}
func (e UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError) Error() string {
	return ""
}

// MintMismatchError Error: 15 `Mint given does not match mint on Metadata`
type MintMismatchError struct{}

func (e MintMismatchError) Code() int {
	return 15
}
func (e MintMismatchError) Error() string {
	return "Mint given does not match mint on Metadata"
}

// EditionsMustHaveExactlyOneTokenError Error: 16 `Editions must have exactly one token`
type EditionsMustHaveExactlyOneTokenError struct{}

func (e EditionsMustHaveExactlyOneTokenError) Code() int {
	return 16
}
func (e EditionsMustHaveExactlyOneTokenError) Error() string {
	return "Editions must have exactly one token"
}

// MaxEditionsMintedAlreadyError Error: 17 “
type MaxEditionsMintedAlreadyError struct{}

func (e MaxEditionsMintedAlreadyError) Code() int {
	return 17
}
func (e MaxEditionsMintedAlreadyError) Error() string {
	return ""
}

// TokenMintToFailedError Error: 18 “
type TokenMintToFailedError struct{}

func (e TokenMintToFailedError) Code() int {
	return 18
}
func (e TokenMintToFailedError) Error() string {
	return ""
}

// MasterRecordMismatchError Error: 19 “
type MasterRecordMismatchError struct{}

func (e MasterRecordMismatchError) Code() int {
	return 19
}
func (e MasterRecordMismatchError) Error() string {
	return ""
}

// DestinationMintMismatchError Error: 20 “
type DestinationMintMismatchError struct{}

func (e DestinationMintMismatchError) Code() int {
	return 20
}
func (e DestinationMintMismatchError) Error() string {
	return ""
}

// EditionAlreadyMintedError Error: 21 “
type EditionAlreadyMintedError struct{}

func (e EditionAlreadyMintedError) Code() int {
	return 21
}
func (e EditionAlreadyMintedError) Error() string {
	return ""
}

// PrintingMintDecimalsShouldBeZeroError Error: 22 “
type PrintingMintDecimalsShouldBeZeroError struct{}

func (e PrintingMintDecimalsShouldBeZeroError) Code() int {
	return 22
}
func (e PrintingMintDecimalsShouldBeZeroError) Error() string {
	return ""
}

// OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError Error: 23 “
type OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError struct{}

func (e OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError) Code() int {
	return 23
}
func (e OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError) Error() string {
	return ""
}

// EditionMintDecimalsShouldBeZeroError Error: 24 `EditionMintDecimalsShouldBeZero`
type EditionMintDecimalsShouldBeZeroError struct{}

func (e EditionMintDecimalsShouldBeZeroError) Code() int {
	return 24
}
func (e EditionMintDecimalsShouldBeZeroError) Error() string {
	return "EditionMintDecimalsShouldBeZero"
}

// TokenBurnFailedError Error: 25 “
type TokenBurnFailedError struct{}

func (e TokenBurnFailedError) Code() int {
	return 25
}
func (e TokenBurnFailedError) Error() string {
	return ""
}

// TokenAccountOneTimeAuthMintMismatchError Error: 26 “
type TokenAccountOneTimeAuthMintMismatchError struct{}

func (e TokenAccountOneTimeAuthMintMismatchError) Code() int {
	return 26
}
func (e TokenAccountOneTimeAuthMintMismatchError) Error() string {
	return ""
}

// DerivedKeyInvalidError Error: 27 `Derived key invalid`
type DerivedKeyInvalidError struct{}

func (e DerivedKeyInvalidError) Code() int {
	return 27
}
func (e DerivedKeyInvalidError) Error() string {
	return "Derived key invalid"
}

// PrintingMintMismatchError Error: 28 `The Printing mint does not match that on the master edition!`
type PrintingMintMismatchError struct{}

func (e PrintingMintMismatchError) Code() int {
	return 28
}
func (e PrintingMintMismatchError) Error() string {
	return "The Printing mint does not match that on the master edition!"
}

// OneTimePrintingAuthMintMismatchError Error: 29 `The One Time Printing Auth mint does not match that on the master edition!`
type OneTimePrintingAuthMintMismatchError struct{}

func (e OneTimePrintingAuthMintMismatchError) Code() int {
	return 29
}
func (e OneTimePrintingAuthMintMismatchError) Error() string {
	return "The One Time Printing Auth mint does not match that on the master edition!"
}

// TokenAccountMintMismatchError Error: 30 `The mint of the token account does not match the Printing mint!`
type TokenAccountMintMismatchError struct{}

func (e TokenAccountMintMismatchError) Code() int {
	return 30
}
func (e TokenAccountMintMismatchError) Error() string {
	return "The mint of the token account does not match the Printing mint!"
}

// TokenAccountMintMismatchV2Error Error: 31 `The mint of the token account does not match the master metadata mint!`
type TokenAccountMintMismatchV2Error struct{}

func (e TokenAccountMintMismatchV2Error) Code() int {
	return 31
}
func (e TokenAccountMintMismatchV2Error) Error() string {
	return "The mint of the token account does not match the master metadata mint!"
}

// NotEnoughTokensError Error: 32 `Not enough tokens to mint a limited edition`
type NotEnoughTokensError struct{}

func (e NotEnoughTokensError) Code() int {
	return 32
}
func (e NotEnoughTokensError) Error() string {
	return "Not enough tokens to mint a limited edition"
}

// PrintingMintAuthorizationAccountMismatchError Error: 33 “
type PrintingMintAuthorizationAccountMismatchError struct{}

func (e PrintingMintAuthorizationAccountMismatchError) Code() int {
	return 33
}
func (e PrintingMintAuthorizationAccountMismatchError) Error() string {
	return ""
}

// AuthorizationTokenAccountOwnerMismatchError Error: 34 “
type AuthorizationTokenAccountOwnerMismatchError struct{}

func (e AuthorizationTokenAccountOwnerMismatchError) Code() int {
	return 34
}
func (e AuthorizationTokenAccountOwnerMismatchError) Error() string {
	return ""
}

// DisabledError Error: 35 “
type DisabledError struct{}

func (e DisabledError) Code() int {
	return 35
}
func (e DisabledError) Error() string {
	return ""
}

// CreatorsTooLongError Error: 36 `Creators list too long`
type CreatorsTooLongError struct{}

func (e CreatorsTooLongError) Code() int {
	return 36
}
func (e CreatorsTooLongError) Error() string {
	return "Creators list too long"
}

// CreatorsMustBeAtleastOneError Error: 37 `Creators must be at least one if set`
type CreatorsMustBeAtleastOneError struct{}

func (e CreatorsMustBeAtleastOneError) Code() int {
	return 37
}
func (e CreatorsMustBeAtleastOneError) Error() string {
	return "Creators must be at least one if set"
}

// MustBeOneOfCreatorsError Error: 38 “
type MustBeOneOfCreatorsError struct{}

func (e MustBeOneOfCreatorsError) Code() int {
	return 38
}
func (e MustBeOneOfCreatorsError) Error() string {
	return ""
}

// NoCreatorsPresentOnMetadataError Error: 39 `This metadata does not have creators`
type NoCreatorsPresentOnMetadataError struct{}

func (e NoCreatorsPresentOnMetadataError) Code() int {
	return 39
}
func (e NoCreatorsPresentOnMetadataError) Error() string {
	return "This metadata does not have creators"
}

// CreatorNotFoundError Error: 40 `This creator address was not found`
type CreatorNotFoundError struct{}

func (e CreatorNotFoundError) Code() int {
	return 40
}
func (e CreatorNotFoundError) Error() string {
	return "This creator address was not found"
}

// InvalidBasisPointsError Error: 41 `Basis points cannot be more than 10000`
type InvalidBasisPointsError struct{}

func (e InvalidBasisPointsError) Code() int {
	return 41
}
func (e InvalidBasisPointsError) Error() string {
	return "Basis points cannot be more than 10000"
}

// PrimarySaleCanOnlyBeFlippedToTrueError Error: 42 `Primary sale can only be flipped to true and is immutable`
type PrimarySaleCanOnlyBeFlippedToTrueError struct{}

func (e PrimarySaleCanOnlyBeFlippedToTrueError) Code() int {
	return 42
}
func (e PrimarySaleCanOnlyBeFlippedToTrueError) Error() string {
	return "Primary sale can only be flipped to true and is immutable"
}

// OwnerMismatchError Error: 43 `Owner does not match that on the account given`
type OwnerMismatchError struct{}

func (e OwnerMismatchError) Code() int {
	return 43
}
func (e OwnerMismatchError) Error() string {
	return "Owner does not match that on the account given"
}

// NoBalanceInAccountForAuthorizationError Error: 44 `This account has no tokens to be used for authorization`
type NoBalanceInAccountForAuthorizationError struct{}

func (e NoBalanceInAccountForAuthorizationError) Code() int {
	return 44
}
func (e NoBalanceInAccountForAuthorizationError) Error() string {
	return "This account has no tokens to be used for authorization"
}

// ShareTotalMustBe100Error Error: 45 `Share total must equal 100 for creator array`
type ShareTotalMustBe100Error struct{}

func (e ShareTotalMustBe100Error) Code() int {
	return 45
}
func (e ShareTotalMustBe100Error) Error() string {
	return "Share total must equal 100 for creator array"
}

// ReservationExistsError Error: 46 “
type ReservationExistsError struct{}

func (e ReservationExistsError) Code() int {
	return 46
}
func (e ReservationExistsError) Error() string {
	return ""
}

// ReservationDoesNotExistError Error: 47 “
type ReservationDoesNotExistError struct{}

func (e ReservationDoesNotExistError) Code() int {
	return 47
}
func (e ReservationDoesNotExistError) Error() string {
	return ""
}

// ReservationNotSetError Error: 48 “
type ReservationNotSetError struct{}

func (e ReservationNotSetError) Code() int {
	return 48
}
func (e ReservationNotSetError) Error() string {
	return ""
}

// ReservationAlreadyMadeError Error: 49 “
type ReservationAlreadyMadeError struct{}

func (e ReservationAlreadyMadeError) Code() int {
	return 49
}
func (e ReservationAlreadyMadeError) Error() string {
	return ""
}

// BeyondMaxAddressSizeError Error: 50 “
type BeyondMaxAddressSizeError struct{}

func (e BeyondMaxAddressSizeError) Code() int {
	return 50
}
func (e BeyondMaxAddressSizeError) Error() string {
	return ""
}

// NumericalOverflowError Error: 51 `NumericalOverflowError`
type NumericalOverflowError struct{}

func (e NumericalOverflowError) Code() int {
	return 51
}
func (e NumericalOverflowError) Error() string {
	return "NumericalOverflowError"
}

// ReservationBreachesMaximumSupplyError Error: 52 “
type ReservationBreachesMaximumSupplyError struct{}

func (e ReservationBreachesMaximumSupplyError) Code() int {
	return 52
}
func (e ReservationBreachesMaximumSupplyError) Error() string {
	return ""
}

// AddressNotInReservationError Error: 53 “
type AddressNotInReservationError struct{}

func (e AddressNotInReservationError) Code() int {
	return 53
}
func (e AddressNotInReservationError) Error() string {
	return ""
}

// CannotVerifyAnotherCreatorError Error: 54 `You cannot unilaterally verify another creator, they must sign`
type CannotVerifyAnotherCreatorError struct{}

func (e CannotVerifyAnotherCreatorError) Code() int {
	return 54
}
func (e CannotVerifyAnotherCreatorError) Error() string {
	return "You cannot unilaterally verify another creator, they must sign"
}

// CannotUnverifyAnotherCreatorError Error: 55 `You cannot unilaterally unverify another creator`
type CannotUnverifyAnotherCreatorError struct{}

func (e CannotUnverifyAnotherCreatorError) Code() int {
	return 55
}
func (e CannotUnverifyAnotherCreatorError) Error() string {
	return "You cannot unilaterally unverify another creator"
}

// SpotMismatchError Error: 56 “
type SpotMismatchError struct{}

func (e SpotMismatchError) Code() int {
	return 56
}
func (e SpotMismatchError) Error() string {
	return ""
}

// IncorrectOwnerError Error: 57 `Incorrect account owner`
type IncorrectOwnerError struct{}

func (e IncorrectOwnerError) Code() int {
	return 57
}
func (e IncorrectOwnerError) Error() string {
	return "Incorrect account owner"
}

// PrintingWouldBreachMaximumSupplyError Error: 58 “
type PrintingWouldBreachMaximumSupplyError struct{}

func (e PrintingWouldBreachMaximumSupplyError) Code() int {
	return 58
}
func (e PrintingWouldBreachMaximumSupplyError) Error() string {
	return ""
}

// DataIsImmutableError Error: 59 `Data is immutable`
type DataIsImmutableError struct{}

func (e DataIsImmutableError) Code() int {
	return 59
}
func (e DataIsImmutableError) Error() string {
	return "Data is immutable"
}

// DuplicateCreatorAddressError Error: 60 `No duplicate creator addresses`
type DuplicateCreatorAddressError struct{}

func (e DuplicateCreatorAddressError) Code() int {
	return 60
}
func (e DuplicateCreatorAddressError) Error() string {
	return "No duplicate creator addresses"
}

// ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError Error: 61 “
type ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError struct{}

func (e ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError) Code() int {
	return 61
}
func (e ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError) Error() string {
	return ""
}

// InvalidTokenProgramError Error: 62 `Invalid token program`
type InvalidTokenProgramError struct{}

func (e InvalidTokenProgramError) Code() int {
	return 62
}
func (e InvalidTokenProgramError) Error() string {
	return "Invalid token program"
}

// DataTypeMismatchError Error: 63 `Data type mismatch`
type DataTypeMismatchError struct{}

func (e DataTypeMismatchError) Code() int {
	return 63
}
func (e DataTypeMismatchError) Error() string {
	return "Data type mismatch"
}

// BeyondAlottedAddressSizeError Error: 64 “
type BeyondAlottedAddressSizeError struct{}

func (e BeyondAlottedAddressSizeError) Code() int {
	return 64
}
func (e BeyondAlottedAddressSizeError) Error() string {
	return ""
}

// ReservationNotCompleteError Error: 65 “
type ReservationNotCompleteError struct{}

func (e ReservationNotCompleteError) Code() int {
	return 65
}
func (e ReservationNotCompleteError) Error() string {
	return ""
}

// TriedToReplaceAnExistingReservationError Error: 66 “
type TriedToReplaceAnExistingReservationError struct{}

func (e TriedToReplaceAnExistingReservationError) Code() int {
	return 66
}
func (e TriedToReplaceAnExistingReservationError) Error() string {
	return ""
}

// InvalidOperationError Error: 67 `Invalid operation`
type InvalidOperationError struct{}

func (e InvalidOperationError) Code() int {
	return 67
}
func (e InvalidOperationError) Error() string {
	return "Invalid operation"
}

// InvalidOwnerError Error: 68 `Invalid Owner`
type InvalidOwnerError struct{}

func (e InvalidOwnerError) Code() int {
	return 68
}
func (e InvalidOwnerError) Error() string {
	return "Invalid Owner"
}

// PrintingMintSupplyMustBeZeroForConversionError Error: 69 `Printing mint supply must be zero for conversion`
type PrintingMintSupplyMustBeZeroForConversionError struct{}

func (e PrintingMintSupplyMustBeZeroForConversionError) Code() int {
	return 69
}
func (e PrintingMintSupplyMustBeZeroForConversionError) Error() string {
	return "Printing mint supply must be zero for conversion"
}

// OneTimeAuthMintSupplyMustBeZeroForConversionError Error: 70 `One Time Auth mint supply must be zero for conversion`
type OneTimeAuthMintSupplyMustBeZeroForConversionError struct{}

func (e OneTimeAuthMintSupplyMustBeZeroForConversionError) Code() int {
	return 70
}
func (e OneTimeAuthMintSupplyMustBeZeroForConversionError) Error() string {
	return "One Time Auth mint supply must be zero for conversion"
}

// InvalidEditionIndexError Error: 71 `You tried to insert one edition too many into an edition mark pda`
type InvalidEditionIndexError struct{}

func (e InvalidEditionIndexError) Code() int {
	return 71
}
func (e InvalidEditionIndexError) Error() string {
	return "You tried to insert one edition too many into an edition mark pda"
}

// ReservationArrayShouldBeSizeOneError Error: 72 “
type ReservationArrayShouldBeSizeOneError struct{}

func (e ReservationArrayShouldBeSizeOneError) Code() int {
	return 72
}
func (e ReservationArrayShouldBeSizeOneError) Error() string {
	return ""
}

// IsMutableCanOnlyBeFlippedToFalseError Error: 73 `Is Mutable can only be flipped to false`
type IsMutableCanOnlyBeFlippedToFalseError struct{}

func (e IsMutableCanOnlyBeFlippedToFalseError) Code() int {
	return 73
}
func (e IsMutableCanOnlyBeFlippedToFalseError) Error() string {
	return "Is Mutable can only be flipped to false"
}

// CollectionCannotBeVerifiedInThisInstructionError Error: 74 `Collection cannot be verified in this instruction`
type CollectionCannotBeVerifiedInThisInstructionError struct{}

func (e CollectionCannotBeVerifiedInThisInstructionError) Code() int {
	return 74
}
func (e CollectionCannotBeVerifiedInThisInstructionError) Error() string {
	return "Collection cannot be verified in this instruction"
}

// RemovedError Error: 75 `This instruction was deprecated in a previous release and is now removed`
type RemovedError struct{}

func (e RemovedError) Code() int {
	return 75
}
func (e RemovedError) Error() string {
	return "This instruction was deprecated in a previous release and is now removed"
}

// MustBeBurnedError Error: 76 “
type MustBeBurnedError struct{}

func (e MustBeBurnedError) Code() int {
	return 76
}
func (e MustBeBurnedError) Error() string {
	return ""
}

// InvalidUseMethodError Error: 77 `This use method is invalid`
type InvalidUseMethodError struct{}

func (e InvalidUseMethodError) Code() int {
	return 77
}
func (e InvalidUseMethodError) Error() string {
	return "This use method is invalid"
}

// CannotChangeUseMethodAfterFirstUseError Error: 78 `Cannot Change Use Method after the first use`
type CannotChangeUseMethodAfterFirstUseError struct{}

func (e CannotChangeUseMethodAfterFirstUseError) Code() int {
	return 78
}
func (e CannotChangeUseMethodAfterFirstUseError) Error() string {
	return "Cannot Change Use Method after the first use"
}

// CannotChangeUsesAfterFirstUseError Error: 79 `Cannot Change Remaining or Available uses after the first use`
type CannotChangeUsesAfterFirstUseError struct{}

func (e CannotChangeUsesAfterFirstUseError) Code() int {
	return 79
}
func (e CannotChangeUsesAfterFirstUseError) Error() string {
	return "Cannot Change Remaining or Available uses after the first use"
}

// CollectionNotFoundError Error: 80 `Collection Not Found on Metadata`
type CollectionNotFoundError struct{}

func (e CollectionNotFoundError) Code() int {
	return 80
}
func (e CollectionNotFoundError) Error() string {
	return "Collection Not Found on Metadata"
}

// InvalidCollectionUpdateAuthorityError Error: 81 `Collection Update Authority is invalid`
type InvalidCollectionUpdateAuthorityError struct{}

func (e InvalidCollectionUpdateAuthorityError) Code() int {
	return 81
}
func (e InvalidCollectionUpdateAuthorityError) Error() string {
	return "Collection Update Authority is invalid"
}

// CollectionMustBeAUniqueMasterEditionError Error: 82 `Collection Must Be a Unique Master Edition v2`
type CollectionMustBeAUniqueMasterEditionError struct{}

func (e CollectionMustBeAUniqueMasterEditionError) Code() int {
	return 82
}
func (e CollectionMustBeAUniqueMasterEditionError) Error() string {
	return "Collection Must Be a Unique Master Edition v2"
}

// UseAuthorityRecordAlreadyExistsError Error: 83 `The Use Authority Record Already Exists, to modify it Revoke, then Approve`
type UseAuthorityRecordAlreadyExistsError struct{}

func (e UseAuthorityRecordAlreadyExistsError) Code() int {
	return 83
}
func (e UseAuthorityRecordAlreadyExistsError) Error() string {
	return "The Use Authority Record Already Exists, to modify it Revoke, then Approve"
}

// UseAuthorityRecordAlreadyRevokedError Error: 84 `The Use Authority Record is empty or already revoked`
type UseAuthorityRecordAlreadyRevokedError struct{}

func (e UseAuthorityRecordAlreadyRevokedError) Code() int {
	return 84
}
func (e UseAuthorityRecordAlreadyRevokedError) Error() string {
	return "The Use Authority Record is empty or already revoked"
}

// UnusableError Error: 85 `This token has no uses`
type UnusableError struct{}

func (e UnusableError) Code() int {
	return 85
}
func (e UnusableError) Error() string {
	return "This token has no uses"
}

// NotEnoughUsesError Error: 86 `There are not enough Uses left on this token.`
type NotEnoughUsesError struct{}

func (e NotEnoughUsesError) Code() int {
	return 86
}
func (e NotEnoughUsesError) Error() string {
	return "There are not enough Uses left on this token."
}

// CollectionAuthorityRecordAlreadyExistsError Error: 87 `This Collection Authority Record Already Exists.`
type CollectionAuthorityRecordAlreadyExistsError struct{}

func (e CollectionAuthorityRecordAlreadyExistsError) Code() int {
	return 87
}
func (e CollectionAuthorityRecordAlreadyExistsError) Error() string {
	return "This Collection Authority Record Already Exists."
}

// CollectionAuthorityDoesNotExistError Error: 88 `This Collection Authority Record Does Not Exist.`
type CollectionAuthorityDoesNotExistError struct{}

func (e CollectionAuthorityDoesNotExistError) Code() int {
	return 88
}
func (e CollectionAuthorityDoesNotExistError) Error() string {
	return "This Collection Authority Record Does Not Exist."
}

// InvalidUseAuthorityRecordError Error: 89 `This Use Authority Record is invalid.`
type InvalidUseAuthorityRecordError struct{}

func (e InvalidUseAuthorityRecordError) Code() int {
	return 89
}
func (e InvalidUseAuthorityRecordError) Error() string {
	return "This Use Authority Record is invalid."
}

// InvalidCollectionAuthorityRecordError Error: 90 “
type InvalidCollectionAuthorityRecordError struct{}

func (e InvalidCollectionAuthorityRecordError) Code() int {
	return 90
}
func (e InvalidCollectionAuthorityRecordError) Error() string {
	return ""
}

// InvalidFreezeAuthorityError Error: 91 `Metadata does not match the freeze authority on the mint`
type InvalidFreezeAuthorityError struct{}

func (e InvalidFreezeAuthorityError) Code() int {
	return 91
}
func (e InvalidFreezeAuthorityError) Error() string {
	return "Metadata does not match the freeze authority on the mint"
}

// InvalidDelegateError Error: 92 `All tokens in this account have not been delegated to this user.`
type InvalidDelegateError struct{}

func (e InvalidDelegateError) Code() int {
	return 92
}
func (e InvalidDelegateError) Error() string {
	return "All tokens in this account have not been delegated to this user."
}

// CannotAdjustVerifiedCreatorError Error: 93 “
type CannotAdjustVerifiedCreatorError struct{}

func (e CannotAdjustVerifiedCreatorError) Code() int {
	return 93
}
func (e CannotAdjustVerifiedCreatorError) Error() string {
	return ""
}

// CannotRemoveVerifiedCreatorError Error: 94 `Verified creators cannot be removed.`
type CannotRemoveVerifiedCreatorError struct{}

func (e CannotRemoveVerifiedCreatorError) Code() int {
	return 94
}
func (e CannotRemoveVerifiedCreatorError) Error() string {
	return "Verified creators cannot be removed."
}

// CannotWipeVerifiedCreatorsError Error: 95 “
type CannotWipeVerifiedCreatorsError struct{}

func (e CannotWipeVerifiedCreatorsError) Code() int {
	return 95
}
func (e CannotWipeVerifiedCreatorsError) Error() string {
	return ""
}

// NotAllowedToChangeSellerFeeBasisPointsError Error: 96 “
type NotAllowedToChangeSellerFeeBasisPointsError struct{}

func (e NotAllowedToChangeSellerFeeBasisPointsError) Code() int {
	return 96
}
func (e NotAllowedToChangeSellerFeeBasisPointsError) Error() string {
	return ""
}

// EditionOverrideCannotBeZeroError Error: 97 `Edition override cannot be zero`
type EditionOverrideCannotBeZeroError struct{}

func (e EditionOverrideCannotBeZeroError) Code() int {
	return 97
}
func (e EditionOverrideCannotBeZeroError) Error() string {
	return "Edition override cannot be zero"
}

// InvalidUserError Error: 98 `Invalid User`
type InvalidUserError struct{}

func (e InvalidUserError) Code() int {
	return 98
}
func (e InvalidUserError) Error() string {
	return "Invalid User"
}

// RevokeCollectionAuthoritySignerIncorrectError Error: 99 `Revoke Collection Authority signer is incorrect`
type RevokeCollectionAuthoritySignerIncorrectError struct{}

func (e RevokeCollectionAuthoritySignerIncorrectError) Code() int {
	return 99
}
func (e RevokeCollectionAuthoritySignerIncorrectError) Error() string {
	return "Revoke Collection Authority signer is incorrect"
}

// TokenCloseFailedError Error: 100 “
type TokenCloseFailedError struct{}

func (e TokenCloseFailedError) Code() int {
	return 100
}
func (e TokenCloseFailedError) Error() string {
	return ""
}

// UnsizedCollectionError Error: 101 `Can't use this function on unsized collection`
type UnsizedCollectionError struct{}

func (e UnsizedCollectionError) Code() int {
	return 101
}
func (e UnsizedCollectionError) Error() string {
	return "Can't use this function on unsized collection"
}

// SizedCollectionError Error: 102 `Can't use this function on a sized collection`
type SizedCollectionError struct{}

func (e SizedCollectionError) Code() int {
	return 102
}
func (e SizedCollectionError) Error() string {
	return "Can't use this function on a sized collection"
}

// MissingCollectionMetadataError Error: 103 `Missing collection metadata account`
type MissingCollectionMetadataError struct{}

func (e MissingCollectionMetadataError) Code() int {
	return 103
}
func (e MissingCollectionMetadataError) Error() string {
	return "Missing collection metadata account"
}

// NotAMemberOfCollectionError Error: 104 `This NFT is not a member of the specified collection.`
type NotAMemberOfCollectionError struct{}

func (e NotAMemberOfCollectionError) Code() int {
	return 104
}
func (e NotAMemberOfCollectionError) Error() string {
	return "This NFT is not a member of the specified collection."
}

// NotVerifiedMemberOfCollectionError Error: 105 `This NFT is not a verified member of the specified collection.`
type NotVerifiedMemberOfCollectionError struct{}

func (e NotVerifiedMemberOfCollectionError) Code() int {
	return 105
}
func (e NotVerifiedMemberOfCollectionError) Error() string {
	return "This NFT is not a verified member of the specified collection."
}

// NotACollectionParentError Error: 106 `This NFT is not a collection parent NFT.`
type NotACollectionParentError struct{}

func (e NotACollectionParentError) Code() int {
	return 106
}
func (e NotACollectionParentError) Error() string {
	return "This NFT is not a collection parent NFT."
}

// CouldNotDetermineTokenStandardError Error: 107 `Could not determine a TokenStandard type.`
type CouldNotDetermineTokenStandardError struct{}

func (e CouldNotDetermineTokenStandardError) Code() int {
	return 107
}
func (e CouldNotDetermineTokenStandardError) Error() string {
	return "Could not determine a TokenStandard type."
}

// MissingEditionAccountError Error: 108 `This mint account has an edition but none was provided.`
type MissingEditionAccountError struct{}

func (e MissingEditionAccountError) Code() int {
	return 108
}
func (e MissingEditionAccountError) Error() string {
	return "This mint account has an edition but none was provided."
}

// NotAMasterEditionError Error: 109 `This edition is not a Master Edition`
type NotAMasterEditionError struct{}

func (e NotAMasterEditionError) Code() int {
	return 109
}
func (e NotAMasterEditionError) Error() string {
	return "This edition is not a Master Edition"
}

// MasterEditionHasPrintsError Error: 110 `This Master Edition has existing prints`
type MasterEditionHasPrintsError struct{}

func (e MasterEditionHasPrintsError) Code() int {
	return 110
}
func (e MasterEditionHasPrintsError) Error() string {
	return "This Master Edition has existing prints"
}

// BorshDeserializationError Error: 111 “
type BorshDeserializationError struct{}

func (e BorshDeserializationError) Code() int {
	return 111
}
func (e BorshDeserializationError) Error() string {
	return ""
}

// CannotUpdateVerifiedCollectionError Error: 112 `Cannot update a verified collection in this command`
type CannotUpdateVerifiedCollectionError struct{}

func (e CannotUpdateVerifiedCollectionError) Code() int {
	return 112
}
func (e CannotUpdateVerifiedCollectionError) Error() string {
	return "Cannot update a verified collection in this command"
}

// CollectionMasterEditionAccountInvalidError Error: 113 `Edition account doesnt match collection `
type CollectionMasterEditionAccountInvalidError struct{}

func (e CollectionMasterEditionAccountInvalidError) Code() int {
	return 113
}
func (e CollectionMasterEditionAccountInvalidError) Error() string {
	return "Edition account doesnt match collection "
}

// AlreadyVerifiedError Error: 114 `Item is already verified.`
type AlreadyVerifiedError struct{}

func (e AlreadyVerifiedError) Code() int {
	return 114
}
func (e AlreadyVerifiedError) Error() string {
	return "Item is already verified."
}

// AlreadyUnverifiedError Error: 115 “
type AlreadyUnverifiedError struct{}

func (e AlreadyUnverifiedError) Code() int {
	return 115
}
func (e AlreadyUnverifiedError) Error() string {
	return ""
}

// NotAPrintEditionError Error: 116 `This edition is not a Print Edition`
type NotAPrintEditionError struct{}

func (e NotAPrintEditionError) Code() int {
	return 116
}
func (e NotAPrintEditionError) Error() string {
	return "This edition is not a Print Edition"
}

// InvalidMasterEditionError Error: 117 `Invalid Master Edition`
type InvalidMasterEditionError struct{}

func (e InvalidMasterEditionError) Code() int {
	return 117
}
func (e InvalidMasterEditionError) Error() string {
	return "Invalid Master Edition"
}

// InvalidPrintEditionError Error: 118 `Invalid Print Edition`
type InvalidPrintEditionError struct{}

func (e InvalidPrintEditionError) Code() int {
	return 118
}
func (e InvalidPrintEditionError) Error() string {
	return "Invalid Print Edition"
}

// InvalidEditionMarkerError Error: 119 `Invalid Edition Marker`
type InvalidEditionMarkerError struct{}

func (e InvalidEditionMarkerError) Code() int {
	return 119
}
func (e InvalidEditionMarkerError) Error() string {
	return "Invalid Edition Marker"
}

// ReservationListDeprecatedError Error: 120 `Reservation List is Deprecated`
type ReservationListDeprecatedError struct{}

func (e ReservationListDeprecatedError) Code() int {
	return 120
}
func (e ReservationListDeprecatedError) Error() string {
	return "Reservation List is Deprecated"
}

// PrintEditionDoesNotMatchMasterEditionError Error: 121 `Print Edition does not match Master Edition`
type PrintEditionDoesNotMatchMasterEditionError struct{}

func (e PrintEditionDoesNotMatchMasterEditionError) Code() int {
	return 121
}
func (e PrintEditionDoesNotMatchMasterEditionError) Error() string {
	return "Print Edition does not match Master Edition"
}

// EditionNumberGreaterThanMaxSupplyError Error: 122 `Edition Number greater than max supply`
type EditionNumberGreaterThanMaxSupplyError struct{}

func (e EditionNumberGreaterThanMaxSupplyError) Code() int {
	return 122
}
func (e EditionNumberGreaterThanMaxSupplyError) Error() string {
	return "Edition Number greater than max supply"
}

// MustUnverifyError Error: 123 `Must unverify before migrating collections.`
type MustUnverifyError struct{}

func (e MustUnverifyError) Code() int {
	return 123
}
func (e MustUnverifyError) Error() string {
	return "Must unverify before migrating collections."
}

// InvalidEscrowBumpSeedError Error: 124 `Invalid Escrow Account Bump Seed`
type InvalidEscrowBumpSeedError struct{}

func (e InvalidEscrowBumpSeedError) Code() int {
	return 124
}
func (e InvalidEscrowBumpSeedError) Error() string {
	return "Invalid Escrow Account Bump Seed"
}

// MustBeEscrowAuthorityError Error: 125 `Must Escrow Authority`
type MustBeEscrowAuthorityError struct{}

func (e MustBeEscrowAuthorityError) Code() int {
	return 125
}
func (e MustBeEscrowAuthorityError) Error() string {
	return "Must Escrow Authority"
}

// InvalidSystemProgramError Error: 126 `Invalid System Program`
type InvalidSystemProgramError struct{}

func (e InvalidSystemProgramError) Code() int {
	return 126
}
func (e InvalidSystemProgramError) Error() string {
	return "Invalid System Program"
}

// MustBeNonFungibleError Error: 127 `Must be a Non Fungible Token`
type MustBeNonFungibleError struct{}

func (e MustBeNonFungibleError) Code() int {
	return 127
}
func (e MustBeNonFungibleError) Error() string {
	return "Must be a Non Fungible Token"
}

// InsufficientTokensError Error: 128 `Insufficient tokens for transfer`
type InsufficientTokensError struct{}

func (e InsufficientTokensError) Code() int {
	return 128
}
func (e InsufficientTokensError) Error() string {
	return "Insufficient tokens for transfer"
}

// BorshSerializationError Error: 129 `Borsh Serialization Error`
type BorshSerializationError struct{}

func (e BorshSerializationError) Code() int {
	return 129
}
func (e BorshSerializationError) Error() string {
	return "Borsh Serialization Error"
}

// NoFreezeAuthoritySetError Error: 130 `Cannot create NFT with no Freeze Authority.`
type NoFreezeAuthoritySetError struct{}

func (e NoFreezeAuthoritySetError) Code() int {
	return 130
}
func (e NoFreezeAuthoritySetError) Error() string {
	return "Cannot create NFT with no Freeze Authority."
}

// InvalidCollectionSizeChangeError Error: 131 `Invalid collection size change`
type InvalidCollectionSizeChangeError struct{}

func (e InvalidCollectionSizeChangeError) Code() int {
	return 131
}
func (e InvalidCollectionSizeChangeError) Error() string {
	return "Invalid collection size change"
}

// InvalidBubblegumSignerError Error: 132 `Invalid bubblegum signer`
type InvalidBubblegumSignerError struct{}

func (e InvalidBubblegumSignerError) Code() int {
	return 132
}
func (e InvalidBubblegumSignerError) Error() string {
	return "Invalid bubblegum signer"
}

// EscrowParentHasDelegateError Error: 133 `Escrow parent cannot have a delegate`
type EscrowParentHasDelegateError struct{}

func (e EscrowParentHasDelegateError) Code() int {
	return 133
}
func (e EscrowParentHasDelegateError) Error() string {
	return "Escrow parent cannot have a delegate"
}

// MintIsNotSignerError Error: 134 `Mint needs to be signer to initialize the account`
type MintIsNotSignerError struct{}

func (e MintIsNotSignerError) Code() int {
	return 134
}
func (e MintIsNotSignerError) Error() string {
	return "Mint needs to be signer to initialize the account"
}

// InvalidTokenStandardError Error: 135 `Invalid token standard`
type InvalidTokenStandardError struct{}

func (e InvalidTokenStandardError) Code() int {
	return 135
}
func (e InvalidTokenStandardError) Error() string {
	return "Invalid token standard"
}

// InvalidMintForTokenStandardError Error: 136 `Invalid mint account for specified token standard`
type InvalidMintForTokenStandardError struct{}

func (e InvalidMintForTokenStandardError) Code() int {
	return 136
}
func (e InvalidMintForTokenStandardError) Error() string {
	return "Invalid mint account for specified token standard"
}

// InvalidAuthorizationRulesError Error: 137 `Invalid authorization rules account`
type InvalidAuthorizationRulesError struct{}

func (e InvalidAuthorizationRulesError) Code() int {
	return 137
}
func (e InvalidAuthorizationRulesError) Error() string {
	return "Invalid authorization rules account"
}

// MissingAuthorizationRulesError Error: 138 `Missing authorization rules account`
type MissingAuthorizationRulesError struct{}

func (e MissingAuthorizationRulesError) Code() int {
	return 138
}
func (e MissingAuthorizationRulesError) Error() string {
	return "Missing authorization rules account"
}

// MissingProgrammableConfigError Error: 139 `Missing programmable configuration`
type MissingProgrammableConfigError struct{}

func (e MissingProgrammableConfigError) Code() int {
	return 139
}
func (e MissingProgrammableConfigError) Error() string {
	return "Missing programmable configuration"
}

// InvalidProgrammableConfigError Error: 140 `Invalid programmable configuration`
type InvalidProgrammableConfigError struct{}

func (e InvalidProgrammableConfigError) Code() int {
	return 140
}
func (e InvalidProgrammableConfigError) Error() string {
	return "Invalid programmable configuration"
}

// DelegateAlreadyExistsError Error: 141 `Delegate already exists`
type DelegateAlreadyExistsError struct{}

func (e DelegateAlreadyExistsError) Code() int {
	return 141
}
func (e DelegateAlreadyExistsError) Error() string {
	return "Delegate already exists"
}

// DelegateNotFoundError Error: 142 `Delegate not found`
type DelegateNotFoundError struct{}

func (e DelegateNotFoundError) Code() int {
	return 142
}
func (e DelegateNotFoundError) Error() string {
	return "Delegate not found"
}

// MissingAccountInBuilderError Error: 143 `Required account not set in instruction builder`
type MissingAccountInBuilderError struct{}

func (e MissingAccountInBuilderError) Code() int {
	return 143
}
func (e MissingAccountInBuilderError) Error() string {
	return "Required account not set in instruction builder"
}

// MissingArgumentInBuilderError Error: 144 `Required argument not set in instruction builder`
type MissingArgumentInBuilderError struct{}

func (e MissingArgumentInBuilderError) Code() int {
	return 144
}
func (e MissingArgumentInBuilderError) Error() string {
	return "Required argument not set in instruction builder"
}

// FeatureNotSupportedError Error: 145 `Feature not supported currently`
type FeatureNotSupportedError struct{}

func (e FeatureNotSupportedError) Code() int {
	return 145
}
func (e FeatureNotSupportedError) Error() string {
	return "Feature not supported currently"
}

// InvalidSystemWalletError Error: 146 `Invalid system wallet`
type InvalidSystemWalletError struct{}

func (e InvalidSystemWalletError) Code() int {
	return 146
}
func (e InvalidSystemWalletError) Error() string {
	return "Invalid system wallet"
}

// OnlySaleDelegateCanTransferError Error: 147 `Only the sale delegate can transfer while its set`
type OnlySaleDelegateCanTransferError struct{}

func (e OnlySaleDelegateCanTransferError) Code() int {
	return 147
}
func (e OnlySaleDelegateCanTransferError) Error() string {
	return "Only the sale delegate can transfer while its set"
}

// MissingTokenAccountError Error: 148 `Missing token account`
type MissingTokenAccountError struct{}

func (e MissingTokenAccountError) Code() int {
	return 148
}
func (e MissingTokenAccountError) Error() string {
	return "Missing token account"
}

// MissingSplTokenProgramError Error: 149 `Missing SPL token program`
type MissingSplTokenProgramError struct{}

func (e MissingSplTokenProgramError) Code() int {
	return 149
}
func (e MissingSplTokenProgramError) Error() string {
	return "Missing SPL token program"
}

// MissingAuthorizationRulesProgramError Error: 150 `Missing authorization rules program`
type MissingAuthorizationRulesProgramError struct{}

func (e MissingAuthorizationRulesProgramError) Code() int {
	return 150
}
func (e MissingAuthorizationRulesProgramError) Error() string {
	return "Missing authorization rules program"
}

// InvalidDelegateRoleForTransferError Error: 151 `Invalid delegate role for transfer`
type InvalidDelegateRoleForTransferError struct{}

func (e InvalidDelegateRoleForTransferError) Code() int {
	return 151
}
func (e InvalidDelegateRoleForTransferError) Error() string {
	return "Invalid delegate role for transfer"
}

// InvalidTransferAuthorityError Error: 152 `Invalid transfer authority`
type InvalidTransferAuthorityError struct{}

func (e InvalidTransferAuthorityError) Code() int {
	return 152
}
func (e InvalidTransferAuthorityError) Error() string {
	return "Invalid transfer authority"
}

// InstructionNotSupportedError Error: 153 `Instruction not supported for ProgrammableNonFungible assets`
type InstructionNotSupportedError struct{}

func (e InstructionNotSupportedError) Code() int {
	return 153
}
func (e InstructionNotSupportedError) Error() string {
	return "Instruction not supported for ProgrammableNonFungible assets"
}

// KeyMismatchError Error: 154 `Public key does not match expected value`
type KeyMismatchError struct{}

func (e KeyMismatchError) Code() int {
	return 154
}
func (e KeyMismatchError) Error() string {
	return "Public key does not match expected value"
}

// LockedTokenError Error: 155 `Token is locked`
type LockedTokenError struct{}

func (e LockedTokenError) Code() int {
	return 155
}
func (e LockedTokenError) Error() string {
	return "Token is locked"
}

// UnlockedTokenError Error: 156 `Token is unlocked`
type UnlockedTokenError struct{}

func (e UnlockedTokenError) Code() int {
	return 156
}
func (e UnlockedTokenError) Error() string {
	return "Token is unlocked"
}

// MissingDelegateRoleError Error: 157 `Missing delegate role`
type MissingDelegateRoleError struct{}

func (e MissingDelegateRoleError) Code() int {
	return 157
}
func (e MissingDelegateRoleError) Error() string {
	return "Missing delegate role"
}

// InvalidAuthorityTypeError Error: 158 `Invalid authority type`
type InvalidAuthorityTypeError struct{}

func (e InvalidAuthorityTypeError) Code() int {
	return 158
}
func (e InvalidAuthorityTypeError) Error() string {
	return "Invalid authority type"
}

// MissingTokenRecordError Error: 159 `Missing token record account`
type MissingTokenRecordError struct{}

func (e MissingTokenRecordError) Code() int {
	return 159
}
func (e MissingTokenRecordError) Error() string {
	return "Missing token record account"
}

// MintSupplyMustBeZeroError Error: 160 `Mint supply must be zero for programmable assets`
type MintSupplyMustBeZeroError struct{}

func (e MintSupplyMustBeZeroError) Code() int {
	return 160
}
func (e MintSupplyMustBeZeroError) Error() string {
	return "Mint supply must be zero for programmable assets"
}

// DataIsEmptyOrZeroedError Error: 161 `Data is empty or zeroed`
type DataIsEmptyOrZeroedError struct{}

func (e DataIsEmptyOrZeroedError) Code() int {
	return 161
}
func (e DataIsEmptyOrZeroedError) Error() string {
	return "Data is empty or zeroed"
}

// MissingTokenOwnerAccountError Error: 162 `Missing token owner`
type MissingTokenOwnerAccountError struct{}

func (e MissingTokenOwnerAccountError) Code() int {
	return 162
}
func (e MissingTokenOwnerAccountError) Error() string {
	return "Missing token owner"
}

// InvalidMasterEditionAccountLengthError Error: 163 `Master edition account has an invalid length`
type InvalidMasterEditionAccountLengthError struct{}

func (e InvalidMasterEditionAccountLengthError) Code() int {
	return 163
}
func (e InvalidMasterEditionAccountLengthError) Error() string {
	return "Master edition account has an invalid length"
}

// IncorrectTokenStateError Error: 164 `Incorrect token state`
type IncorrectTokenStateError struct{}

func (e IncorrectTokenStateError) Code() int {
	return 164
}
func (e IncorrectTokenStateError) Error() string {
	return "Incorrect token state"
}

// InvalidDelegateRoleError Error: 165 `Invalid delegate role`
type InvalidDelegateRoleError struct{}

func (e InvalidDelegateRoleError) Code() int {
	return 165
}
func (e InvalidDelegateRoleError) Error() string {
	return "Invalid delegate role"
}

// MissingPrintSupplyError Error: 166 `Print supply is required for non-fungibles`
type MissingPrintSupplyError struct{}

func (e MissingPrintSupplyError) Code() int {
	return 166
}
func (e MissingPrintSupplyError) Error() string {
	return "Print supply is required for non-fungibles"
}

// MissingMasterEditionAccountError Error: 167 `Missing master edition account`
type MissingMasterEditionAccountError struct{}

func (e MissingMasterEditionAccountError) Code() int {
	return 167
}
func (e MissingMasterEditionAccountError) Error() string {
	return "Missing master edition account"
}

// AmountMustBeGreaterThanZeroError Error: 168 `Amount must be greater than zero`
type AmountMustBeGreaterThanZeroError struct{}

func (e AmountMustBeGreaterThanZeroError) Code() int {
	return 168
}
func (e AmountMustBeGreaterThanZeroError) Error() string {
	return "Amount must be greater than zero"
}

// InvalidDelegateArgsError Error: 169 `Invalid delegate args`
type InvalidDelegateArgsError struct{}

func (e InvalidDelegateArgsError) Code() int {
	return 169
}
func (e InvalidDelegateArgsError) Error() string {
	return "Invalid delegate args"
}

// MissingLockedTransferAddressError Error: 170 `Missing address for locked transfer`
type MissingLockedTransferAddressError struct{}

func (e MissingLockedTransferAddressError) Code() int {
	return 170
}
func (e MissingLockedTransferAddressError) Error() string {
	return "Missing address for locked transfer"
}

// InvalidLockedTransferAddressError Error: 171 `Invalid destination address for locked transfer`
type InvalidLockedTransferAddressError struct{}

func (e InvalidLockedTransferAddressError) Code() int {
	return 171
}
func (e InvalidLockedTransferAddressError) Error() string {
	return "Invalid destination address for locked transfer"
}

// DataIncrementLimitExceededError Error: 172 `Exceeded account realloc increase limit`
type DataIncrementLimitExceededError struct{}

func (e DataIncrementLimitExceededError) Code() int {
	return 172
}
func (e DataIncrementLimitExceededError) Error() string {
	return "Exceeded account realloc increase limit"
}

// CannotUpdateAssetWithDelegateError Error: 173 `Cannot update the rule set of a programmable asset that has a delegate`
type CannotUpdateAssetWithDelegateError struct{}

func (e CannotUpdateAssetWithDelegateError) Code() int {
	return 173
}
func (e CannotUpdateAssetWithDelegateError) Error() string {
	return "Cannot update the rule set of a programmable asset that has a delegate"
}

// InvalidAmountError Error: 174 `Invalid token amount for this operation or token standard`
type InvalidAmountError struct{}

func (e InvalidAmountError) Code() int {
	return 174
}
func (e InvalidAmountError) Error() string {
	return "Invalid token amount for this operation or token standard"
}

// MissingMasterEditionMintAccountError Error: 175 `Missing master edition mint account`
type MissingMasterEditionMintAccountError struct{}

func (e MissingMasterEditionMintAccountError) Code() int {
	return 175
}
func (e MissingMasterEditionMintAccountError) Error() string {
	return "Missing master edition mint account"
}

// MissingMasterEditionTokenAccountError Error: 176 `Missing master edition token account`
type MissingMasterEditionTokenAccountError struct{}

func (e MissingMasterEditionTokenAccountError) Code() int {
	return 176
}
func (e MissingMasterEditionTokenAccountError) Error() string {
	return "Missing master edition token account"
}

// MissingEditionMarkerAccountError Error: 177 `Missing edition marker account`
type MissingEditionMarkerAccountError struct{}

func (e MissingEditionMarkerAccountError) Code() int {
	return 177
}
func (e MissingEditionMarkerAccountError) Error() string {
	return "Missing edition marker account"
}

// CannotBurnWithDelegateError Error: 178 `Cannot burn while persistent delegate is set`
type CannotBurnWithDelegateError struct{}

func (e CannotBurnWithDelegateError) Code() int {
	return 178
}
func (e CannotBurnWithDelegateError) Error() string {
	return "Cannot burn while persistent delegate is set"
}

// MissingEditionError Error: 179 `Missing edition account`
type MissingEditionError struct{}

func (e MissingEditionError) Code() int {
	return 179
}
func (e MissingEditionError) Error() string {
	return "Missing edition account"
}

// InvalidAssociatedTokenAccountProgramError Error: 180 `Invalid Associated Token Account Program`
type InvalidAssociatedTokenAccountProgramError struct{}

func (e InvalidAssociatedTokenAccountProgramError) Code() int {
	return 180
}
func (e InvalidAssociatedTokenAccountProgramError) Error() string {
	return "Invalid Associated Token Account Program"
}

// InvalidInstructionsSysvarError Error: 181 `Invalid InstructionsSysvar`
type InvalidInstructionsSysvarError struct{}

func (e InvalidInstructionsSysvarError) Code() int {
	return 181
}
func (e InvalidInstructionsSysvarError) Error() string {
	return "Invalid InstructionsSysvar"
}

// InvalidParentAccountsError Error: 182 `Invalid or Unneeded parent accounts`
type InvalidParentAccountsError struct{}

func (e InvalidParentAccountsError) Code() int {
	return 182
}
func (e InvalidParentAccountsError) Error() string {
	return "Invalid or Unneeded parent accounts"
}

// InvalidUpdateArgsError Error: 183 `Authority cannot apply all update args`
type InvalidUpdateArgsError struct{}

func (e InvalidUpdateArgsError) Code() int {
	return 183
}
func (e InvalidUpdateArgsError) Error() string {
	return "Authority cannot apply all update args"
}

// InsufficientTokenBalanceError Error: 184 `Token account does not have enough tokens`
type InsufficientTokenBalanceError struct{}

func (e InsufficientTokenBalanceError) Code() int {
	return 184
}
func (e InsufficientTokenBalanceError) Error() string {
	return "Token account does not have enough tokens"
}

// MissingCollectionMintError Error: 185 `Missing collection account`
type MissingCollectionMintError struct{}

func (e MissingCollectionMintError) Code() int {
	return 185
}
func (e MissingCollectionMintError) Error() string {
	return "Missing collection account"
}

// MissingCollectionMasterEditionError Error: 186 `Missing collection master edition account`
type MissingCollectionMasterEditionError struct{}

func (e MissingCollectionMasterEditionError) Code() int {
	return 186
}
func (e MissingCollectionMasterEditionError) Error() string {
	return "Missing collection master edition account"
}

// InvalidTokenRecordError Error: 187 `Invalid token record account`
type InvalidTokenRecordError struct{}

func (e InvalidTokenRecordError) Code() int {
	return 187
}
func (e InvalidTokenRecordError) Error() string {
	return "Invalid token record account"
}

// InvalidCloseAuthorityError Error: 188 `The close authority needs to be revoked by the Utility Delegate`
type InvalidCloseAuthorityError struct{}

func (e InvalidCloseAuthorityError) Code() int {
	return 188
}
func (e InvalidCloseAuthorityError) Error() string {
	return "The close authority needs to be revoked by the Utility Delegate"
}

// InvalidInstructionError Error: 189 `Invalid or removed instruction`
type InvalidInstructionError struct{}

func (e InvalidInstructionError) Code() int {
	return 189
}
func (e InvalidInstructionError) Error() string {
	return "Invalid or removed instruction"
}

// MissingDelegateRecordError Error: 190 `Missing delegate record`
type MissingDelegateRecordError struct{}

func (e MissingDelegateRecordError) Code() int {
	return 190
}
func (e MissingDelegateRecordError) Error() string {
	return "Missing delegate record"
}

// InvalidFeeAccountError Error: 191 “
type InvalidFeeAccountError struct{}

func (e InvalidFeeAccountError) Code() int {
	return 191
}
func (e InvalidFeeAccountError) Error() string {
	return ""
}

// InvalidMetadataFlagsError Error: 192 “
type InvalidMetadataFlagsError struct{}

func (e InvalidMetadataFlagsError) Code() int {
	return 192
}
func (e InvalidMetadataFlagsError) Error() string {
	return ""
}

// CannotChangeUpdateAuthorityWithDelegateError Error: 193 `Cannot change the update authority with a delegate`
type CannotChangeUpdateAuthorityWithDelegateError struct{}

func (e CannotChangeUpdateAuthorityWithDelegateError) Code() int {
	return 193
}
func (e CannotChangeUpdateAuthorityWithDelegateError) Error() string {
	return "Cannot change the update authority with a delegate"
}

// InvalidMintExtensionTypeError Error: 194 `Invalid mint extension type`
type InvalidMintExtensionTypeError struct{}

func (e InvalidMintExtensionTypeError) Code() int {
	return 194
}
func (e InvalidMintExtensionTypeError) Error() string {
	return "Invalid mint extension type"
}

// InvalidMintCloseAuthorityError Error: 195 `Invalid mint close authority`
type InvalidMintCloseAuthorityError struct{}

func (e InvalidMintCloseAuthorityError) Code() int {
	return 195
}
func (e InvalidMintCloseAuthorityError) Error() string {
	return "Invalid mint close authority"
}

// InvalidMetadataPointerError Error: 196 `Invalid metadata pointer`
type InvalidMetadataPointerError struct{}

func (e InvalidMetadataPointerError) Code() int {
	return 196
}
func (e InvalidMetadataPointerError) Error() string {
	return "Invalid metadata pointer"
}

// InvalidTokenExtensionTypeError Error: 197 `Invalid token extension type`
type InvalidTokenExtensionTypeError struct{}

func (e InvalidTokenExtensionTypeError) Code() int {
	return 197
}
func (e InvalidTokenExtensionTypeError) Error() string {
	return "Invalid token extension type"
}

// MissingImmutableOwnerExtensionError Error: 198 `Missing immutable owner extension`
type MissingImmutableOwnerExtensionError struct{}

func (e MissingImmutableOwnerExtensionError) Code() int {
	return 198
}
func (e MissingImmutableOwnerExtensionError) Error() string {
	return "Missing immutable owner extension"
}
