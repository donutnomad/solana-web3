// This code was AUTOGENERATED using the library.
// Please DO NOT EDIT THIS FILE.

package mpl_token_metadata

import (
	"errors"
	common "github.com/donutnomad/solana-web3/common"
	binary "github.com/gagliardetto/binary"
)

// SetCollectionSizeArgs Struct
type SetCollectionSizeArgs struct {
	Size uint64
}

const SET_COLLECTION_SIZE_ARGS_SIZE = 8

func (obj *SetCollectionSizeArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Size); err != nil {
		return err
	}
	return nil
}

func (obj *SetCollectionSizeArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Size); err != nil {
		return err
	}
	return nil
}

// CreateMasterEditionArgs Struct
type CreateMasterEditionArgs struct {
	MaxSupply *uint64 `bin:"optional"`
}

const CREATE_MASTER_EDITION_ARGS_SIZE = 9

func (obj *CreateMasterEditionArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.MaxSupply != nil); err != nil {
		return err
	}
	if obj.MaxSupply != nil {
		if err = encoder.Encode(obj.MaxSupply); err != nil {
			return err
		}
	}
	return nil
}

func (obj *CreateMasterEditionArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.MaxSupply); err != nil {
			return err
		}
	}
	return nil
}

// MintNewEditionFromMasterEditionViaTokenArgs Struct
type MintNewEditionFromMasterEditionViaTokenArgs struct {
	Edition uint64
}

const MINT_NEW_EDITION_FROM_MASTER_EDITION_VIA_TOKEN_ARGS_SIZE = 8

func (obj *MintNewEditionFromMasterEditionViaTokenArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Edition); err != nil {
		return err
	}
	return nil
}

func (obj *MintNewEditionFromMasterEditionViaTokenArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Edition); err != nil {
		return err
	}
	return nil
}

// TransferOutOfEscrowArgs Struct
type TransferOutOfEscrowArgs struct {
	Amount uint64
}

const TRANSFER_OUT_OF_ESCROW_ARGS_SIZE = 8

func (obj *TransferOutOfEscrowArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	return nil
}

func (obj *TransferOutOfEscrowArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	return nil
}

// CreateMetadataAccountArgsV3 Struct
type CreateMetadataAccountArgsV3 struct {
	Data              DataV2
	IsMutable         bool
	CollectionDetails *CollectionDetails `bin:"optional"`
}

func (obj *CreateMetadataAccountArgsV3) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Data); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.IsMutable); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.CollectionDetails != nil); err != nil {
		return err
	}
	if obj.CollectionDetails != nil {
		if err = encoder.Encode(obj.CollectionDetails); err != nil {
			return err
		}
	}
	return nil
}

func (obj *CreateMetadataAccountArgsV3) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Data); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.IsMutable); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.CollectionDetails); err != nil {
			return err
		}
	}
	return nil
}

// UpdateMetadataAccountArgsV2 Struct
type UpdateMetadataAccountArgsV2 struct {
	Data                *DataV2           `bin:"optional"`
	UpdateAuthority     *common.PublicKey `bin:"optional"`
	PrimarySaleHappened *bool             `bin:"optional"`
	IsMutable           *bool             `bin:"optional"`
}

func (obj *UpdateMetadataAccountArgsV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.Data != nil); err != nil {
		return err
	}
	if obj.Data != nil {
		if err = encoder.Encode(obj.Data); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.UpdateAuthority != nil); err != nil {
		return err
	}
	if obj.UpdateAuthority != nil {
		if err = encoder.Encode(obj.UpdateAuthority); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.PrimarySaleHappened != nil); err != nil {
		return err
	}
	if obj.PrimarySaleHappened != nil {
		if err = encoder.Encode(obj.PrimarySaleHappened); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.IsMutable != nil); err != nil {
		return err
	}
	if obj.IsMutable != nil {
		if err = encoder.Encode(obj.IsMutable); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateMetadataAccountArgsV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Data); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.UpdateAuthority); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.PrimarySaleHappened); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.IsMutable); err != nil {
			return err
		}
	}
	return nil
}

// ApproveUseAuthorityArgs Struct
type ApproveUseAuthorityArgs struct {
	NumberOfUses uint64
}

const APPROVE_USE_AUTHORITY_ARGS_SIZE = 8

func (obj *ApproveUseAuthorityArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.NumberOfUses); err != nil {
		return err
	}
	return nil
}

func (obj *ApproveUseAuthorityArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.NumberOfUses); err != nil {
		return err
	}
	return nil
}

// UtilizeArgs Struct
type UtilizeArgs struct {
	NumberOfUses uint64
}

const UTILIZE_ARGS_SIZE = 8

func (obj *UtilizeArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.NumberOfUses); err != nil {
		return err
	}
	return nil
}

func (obj *UtilizeArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.NumberOfUses); err != nil {
		return err
	}
	return nil
}

// AuthorizationData Struct
type AuthorizationData struct {
	Payload Payload
}

func (obj *AuthorizationData) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Payload); err != nil {
		return err
	}
	return nil
}

func (obj *AuthorizationData) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Payload); err != nil {
		return err
	}
	return nil
}

// AssetData Struct
type AssetData struct {
	Name                 string
	Symbol               string
	Uri                  string
	SellerFeeBasisPoints uint16
	Creators             []Creator `bin:"optional"`
	PrimarySaleHappened  bool
	IsMutable            bool
	TokenStandard        TokenStandard
	Collection           *Collection        `bin:"optional"`
	Uses                 *Uses              `bin:"optional"`
	CollectionDetails    *CollectionDetails `bin:"optional"`
	RuleSet              *common.PublicKey  `bin:"optional"`
}

func (obj *AssetData) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Name); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Symbol); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Uri); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.SellerFeeBasisPoints); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.Creators != nil); err != nil {
		return err
	}
	if obj.Creators != nil {
		if err = encoder.Encode(obj.Creators); err != nil {
			return err
		}
	}
	if err = encoder.Encode(&obj.PrimarySaleHappened); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.IsMutable); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.TokenStandard); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.Collection != nil); err != nil {
		return err
	}
	if obj.Collection != nil {
		if err = encoder.Encode(obj.Collection); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.Uses != nil); err != nil {
		return err
	}
	if obj.Uses != nil {
		if err = encoder.Encode(obj.Uses); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.CollectionDetails != nil); err != nil {
		return err
	}
	if obj.CollectionDetails != nil {
		if err = encoder.Encode(obj.CollectionDetails); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.RuleSet != nil); err != nil {
		return err
	}
	if obj.RuleSet != nil {
		if err = encoder.Encode(obj.RuleSet); err != nil {
			return err
		}
	}
	return nil
}

func (obj *AssetData) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Name); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Symbol); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Uri); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.SellerFeeBasisPoints); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Creators); err != nil {
			return err
		}
	}
	if err = decoder.Decode(&obj.PrimarySaleHappened); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.IsMutable); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.TokenStandard); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Collection); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Uses); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.CollectionDetails); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.RuleSet); err != nil {
			return err
		}
	}
	return nil
}

// Collection Struct
type Collection struct {
	Verified bool
	Key      common.PublicKey
}

const COLLECTION_SIZE = 33

func (obj *Collection) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Verified); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Key); err != nil {
		return err
	}
	return nil
}

func (obj *Collection) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Verified); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Key); err != nil {
		return err
	}
	return nil
}

// Creator Struct
type Creator struct {
	Address  common.PublicKey
	Verified bool
	Share    uint8
}

const CREATOR_SIZE = 34

func (obj *Creator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Address); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Verified); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Share); err != nil {
		return err
	}
	return nil
}

func (obj *Creator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Address); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Verified); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Share); err != nil {
		return err
	}
	return nil
}

// Data Struct
type Data struct {
	Name                 string
	Symbol               string
	Uri                  string
	SellerFeeBasisPoints uint16
	Creators             []Creator `bin:"optional"`
}

func (obj *Data) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Name); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Symbol); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Uri); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.SellerFeeBasisPoints); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.Creators != nil); err != nil {
		return err
	}
	if obj.Creators != nil {
		if err = encoder.Encode(obj.Creators); err != nil {
			return err
		}
	}
	return nil
}

func (obj *Data) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Name); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Symbol); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Uri); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.SellerFeeBasisPoints); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Creators); err != nil {
			return err
		}
	}
	return nil
}

// DataV2 Struct
type DataV2 struct {
	Name                 string
	Symbol               string
	Uri                  string
	SellerFeeBasisPoints uint16
	Creators             []Creator   `bin:"optional"`
	Collection           *Collection `bin:"optional"`
	Uses                 *Uses       `bin:"optional"`
}

func (obj *DataV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Name); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Symbol); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Uri); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.SellerFeeBasisPoints); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.Creators != nil); err != nil {
		return err
	}
	if obj.Creators != nil {
		if err = encoder.Encode(obj.Creators); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.Collection != nil); err != nil {
		return err
	}
	if obj.Collection != nil {
		if err = encoder.Encode(obj.Collection); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.Uses != nil); err != nil {
		return err
	}
	if obj.Uses != nil {
		if err = encoder.Encode(obj.Uses); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DataV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Name); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Symbol); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Uri); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.SellerFeeBasisPoints); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Creators); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Collection); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Uses); err != nil {
			return err
		}
	}
	return nil
}

// Reservation Struct
type Reservation struct {
	Address        common.PublicKey
	SpotsRemaining uint64
	TotalSpots     uint64
}

const RESERVATION_SIZE = 48

func (obj *Reservation) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Address); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.SpotsRemaining); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.TotalSpots); err != nil {
		return err
	}
	return nil
}

func (obj *Reservation) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Address); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.SpotsRemaining); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.TotalSpots); err != nil {
		return err
	}
	return nil
}

// ReservationV1 Struct
type ReservationV1 struct {
	Address        common.PublicKey
	SpotsRemaining uint8
	TotalSpots     uint8
}

const RESERVATION_V1_SIZE = 34

func (obj *ReservationV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Address); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.SpotsRemaining); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.TotalSpots); err != nil {
		return err
	}
	return nil
}

func (obj *ReservationV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Address); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.SpotsRemaining); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.TotalSpots); err != nil {
		return err
	}
	return nil
}

// SeedsVec Struct
type SeedsVec struct {
	Seeds []byte
}

func (obj *SeedsVec) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Seeds); err != nil {
		return err
	}
	return nil
}

func (obj *SeedsVec) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Seeds); err != nil {
		return err
	}
	return nil
}

// ProofInfo Struct
type ProofInfo struct {
	Proof [][32]uint8
}

func (obj *ProofInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Proof); err != nil {
		return err
	}
	return nil
}

func (obj *ProofInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Proof); err != nil {
		return err
	}
	return nil
}

// Payload Struct
type Payload struct {
	Map map[string]PayloadType
}

func (obj *Payload) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Map); err != nil {
		return err
	}
	return nil
}

func (obj *Payload) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Map); err != nil {
		return err
	}
	return nil
}

// Uses Struct
type Uses struct {
	UseMethod UseMethod
	Remaining uint64
	Total     uint64
}

const USES_SIZE = 17

func (obj *Uses) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.UseMethod); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Remaining); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Total); err != nil {
		return err
	}
	return nil
}

func (obj *Uses) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.UseMethod); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Remaining); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Total); err != nil {
		return err
	}
	return nil
}

// BurnArgs Enum
type BurnArgs struct {
	V1 *BurnArgsV1 `bin:"optional"`
}

type BurnArgsV1 struct {
	Amount uint64
}

func (obj *BurnArgsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	return nil
}

func (obj *BurnArgsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	return nil
}

func (obj *BurnArgs) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "BurnArgs(Unknown)"
}

func (obj *BurnArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *BurnArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp BurnArgsV1
		if err = decoder.Decode(&tmp.Amount); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *BurnArgs) IsV1() bool {
	return obj.V1 != nil
}

func (obj *BurnArgs) AsV1() BurnArgsV1 {
	return *obj.V1
}

func NewBurnArgs_V1(amount uint64) BurnArgs {
	return BurnArgs{
		V1: &BurnArgsV1{
			Amount: amount,
		},
	}
}

// DelegateArgs Enum
type DelegateArgs struct {
	CollectionV1             *DelegateArgsCollectionV1             `bin:"optional"`
	SaleV1                   *DelegateArgsSaleV1                   `bin:"optional"`
	TransferV1               *DelegateArgsTransferV1               `bin:"optional"`
	DataV1                   *DelegateArgsDataV1                   `bin:"optional"`
	UtilityV1                *DelegateArgsUtilityV1                `bin:"optional"`
	StakingV1                *DelegateArgsStakingV1                `bin:"optional"`
	StandardV1               *DelegateArgsStandardV1               `bin:"optional"`
	LockedTransferV1         *DelegateArgsLockedTransferV1         `bin:"optional"`
	ProgrammableConfigV1     *DelegateArgsProgrammableConfigV1     `bin:"optional"`
	AuthorityItemV1          *DelegateArgsAuthorityItemV1          `bin:"optional"`
	DataItemV1               *DelegateArgsDataItemV1               `bin:"optional"`
	CollectionItemV1         *DelegateArgsCollectionItemV1         `bin:"optional"`
	ProgrammableConfigItemV1 *DelegateArgsProgrammableConfigItemV1 `bin:"optional"`
}

type DelegateArgsCollectionV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsCollectionV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsCollectionV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsSaleV1 struct {
	Amount            uint64
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsSaleV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsSaleV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsTransferV1 struct {
	Amount            uint64
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsTransferV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsTransferV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsDataV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsDataV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsDataV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsUtilityV1 struct {
	Amount            uint64
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsUtilityV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsUtilityV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsStakingV1 struct {
	Amount            uint64
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsStakingV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsStakingV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsStandardV1 struct {
	Amount uint64
}

func (obj *DelegateArgsStandardV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	return nil
}

func (obj *DelegateArgsStandardV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	return nil
}

type DelegateArgsLockedTransferV1 struct {
	Amount            uint64
	LockedAddress     common.PublicKey
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsLockedTransferV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.LockedAddress); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsLockedTransferV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.LockedAddress); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsProgrammableConfigV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsProgrammableConfigV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsProgrammableConfigV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsAuthorityItemV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsAuthorityItemV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsAuthorityItemV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsDataItemV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsDataItemV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsDataItemV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsCollectionItemV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsCollectionItemV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsCollectionItemV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type DelegateArgsProgrammableConfigItemV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *DelegateArgsProgrammableConfigItemV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgsProgrammableConfigItemV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *DelegateArgs) String() string {
	if obj.CollectionV1 != nil {
		return "CollectionV1"
	}
	if obj.SaleV1 != nil {
		return "SaleV1"
	}
	if obj.TransferV1 != nil {
		return "TransferV1"
	}
	if obj.DataV1 != nil {
		return "DataV1"
	}
	if obj.UtilityV1 != nil {
		return "UtilityV1"
	}
	if obj.StakingV1 != nil {
		return "StakingV1"
	}
	if obj.StandardV1 != nil {
		return "StandardV1"
	}
	if obj.LockedTransferV1 != nil {
		return "LockedTransferV1"
	}
	if obj.ProgrammableConfigV1 != nil {
		return "ProgrammableConfigV1"
	}
	if obj.AuthorityItemV1 != nil {
		return "AuthorityItemV1"
	}
	if obj.DataItemV1 != nil {
		return "DataItemV1"
	}
	if obj.CollectionItemV1 != nil {
		return "CollectionItemV1"
	}
	if obj.ProgrammableConfigItemV1 != nil {
		return "ProgrammableConfigItemV1"
	}
	return "DelegateArgs(Unknown)"
}

func (obj *DelegateArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.CollectionV1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.CollectionV1); err != nil {
			return err
		}
		return nil
	}
	if obj.SaleV1 != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.SaleV1); err != nil {
			return err
		}
		return nil
	}
	if obj.TransferV1 != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.TransferV1); err != nil {
			return err
		}
		return nil
	}
	if obj.DataV1 != nil {
		if err = encoder.WriteUint8(uint8(0x3)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.DataV1); err != nil {
			return err
		}
		return nil
	}
	if obj.UtilityV1 != nil {
		if err = encoder.WriteUint8(uint8(0x4)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.UtilityV1); err != nil {
			return err
		}
		return nil
	}
	if obj.StakingV1 != nil {
		if err = encoder.WriteUint8(uint8(0x5)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.StakingV1); err != nil {
			return err
		}
		return nil
	}
	if obj.StandardV1 != nil {
		if err = encoder.WriteUint8(uint8(0x6)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.StandardV1); err != nil {
			return err
		}
		return nil
	}
	if obj.LockedTransferV1 != nil {
		if err = encoder.WriteUint8(uint8(0x7)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.LockedTransferV1); err != nil {
			return err
		}
		return nil
	}
	if obj.ProgrammableConfigV1 != nil {
		if err = encoder.WriteUint8(uint8(0x8)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.ProgrammableConfigV1); err != nil {
			return err
		}
		return nil
	}
	if obj.AuthorityItemV1 != nil {
		if err = encoder.WriteUint8(uint8(0x9)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.AuthorityItemV1); err != nil {
			return err
		}
		return nil
	}
	if obj.DataItemV1 != nil {
		if err = encoder.WriteUint8(uint8(0xa)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.DataItemV1); err != nil {
			return err
		}
		return nil
	}
	if obj.CollectionItemV1 != nil {
		if err = encoder.WriteUint8(uint8(0xb)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.CollectionItemV1); err != nil {
			return err
		}
		return nil
	}
	if obj.ProgrammableConfigItemV1 != nil {
		if err = encoder.WriteUint8(uint8(0xc)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.ProgrammableConfigItemV1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *DelegateArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp DelegateArgsCollectionV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.CollectionV1 = &tmp
		return nil
	} else if idx == uint8(0x1) {
		var tmp DelegateArgsSaleV1
		if err = decoder.Decode(&tmp.Amount); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.SaleV1 = &tmp
		return nil
	} else if idx == uint8(0x2) {
		var tmp DelegateArgsTransferV1
		if err = decoder.Decode(&tmp.Amount); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.TransferV1 = &tmp
		return nil
	} else if idx == uint8(0x3) {
		var tmp DelegateArgsDataV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.DataV1 = &tmp
		return nil
	} else if idx == uint8(0x4) {
		var tmp DelegateArgsUtilityV1
		if err = decoder.Decode(&tmp.Amount); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.UtilityV1 = &tmp
		return nil
	} else if idx == uint8(0x5) {
		var tmp DelegateArgsStakingV1
		if err = decoder.Decode(&tmp.Amount); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.StakingV1 = &tmp
		return nil
	} else if idx == uint8(0x6) {
		var tmp DelegateArgsStandardV1
		if err = decoder.Decode(&tmp.Amount); err != nil {
			return err
		}
		obj.StandardV1 = &tmp
		return nil
	} else if idx == uint8(0x7) {
		var tmp DelegateArgsLockedTransferV1
		if err = decoder.Decode(&tmp.Amount); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.LockedAddress); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.LockedTransferV1 = &tmp
		return nil
	} else if idx == uint8(0x8) {
		var tmp DelegateArgsProgrammableConfigV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.ProgrammableConfigV1 = &tmp
		return nil
	} else if idx == uint8(0x9) {
		var tmp DelegateArgsAuthorityItemV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.AuthorityItemV1 = &tmp
		return nil
	} else if idx == uint8(0xa) {
		var tmp DelegateArgsDataItemV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.DataItemV1 = &tmp
		return nil
	} else if idx == uint8(0xb) {
		var tmp DelegateArgsCollectionItemV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.CollectionItemV1 = &tmp
		return nil
	} else if idx == uint8(0xc) {
		var tmp DelegateArgsProgrammableConfigItemV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.ProgrammableConfigItemV1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *DelegateArgs) IsCollectionV1() bool {
	return obj.CollectionV1 != nil
}

func (obj *DelegateArgs) AsCollectionV1() DelegateArgsCollectionV1 {
	return *obj.CollectionV1
}

func NewDelegateArgs_CollectionV1(authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		CollectionV1: &DelegateArgsCollectionV1{
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsSaleV1() bool {
	return obj.SaleV1 != nil
}

func (obj *DelegateArgs) AsSaleV1() DelegateArgsSaleV1 {
	return *obj.SaleV1
}

func NewDelegateArgs_SaleV1(amount uint64, authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		SaleV1: &DelegateArgsSaleV1{
			Amount:            amount,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsTransferV1() bool {
	return obj.TransferV1 != nil
}

func (obj *DelegateArgs) AsTransferV1() DelegateArgsTransferV1 {
	return *obj.TransferV1
}

func NewDelegateArgs_TransferV1(amount uint64, authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		TransferV1: &DelegateArgsTransferV1{
			Amount:            amount,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsDataV1() bool {
	return obj.DataV1 != nil
}

func (obj *DelegateArgs) AsDataV1() DelegateArgsDataV1 {
	return *obj.DataV1
}

func NewDelegateArgs_DataV1(authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		DataV1: &DelegateArgsDataV1{
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsUtilityV1() bool {
	return obj.UtilityV1 != nil
}

func (obj *DelegateArgs) AsUtilityV1() DelegateArgsUtilityV1 {
	return *obj.UtilityV1
}

func NewDelegateArgs_UtilityV1(amount uint64, authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		UtilityV1: &DelegateArgsUtilityV1{
			Amount:            amount,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsStakingV1() bool {
	return obj.StakingV1 != nil
}

func (obj *DelegateArgs) AsStakingV1() DelegateArgsStakingV1 {
	return *obj.StakingV1
}

func NewDelegateArgs_StakingV1(amount uint64, authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		StakingV1: &DelegateArgsStakingV1{
			Amount:            amount,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsStandardV1() bool {
	return obj.StandardV1 != nil
}

func (obj *DelegateArgs) AsStandardV1() DelegateArgsStandardV1 {
	return *obj.StandardV1
}

func NewDelegateArgs_StandardV1(amount uint64) DelegateArgs {
	return DelegateArgs{
		StandardV1: &DelegateArgsStandardV1{
			Amount: amount,
		},
	}
}

func (obj *DelegateArgs) IsLockedTransferV1() bool {
	return obj.LockedTransferV1 != nil
}

func (obj *DelegateArgs) AsLockedTransferV1() DelegateArgsLockedTransferV1 {
	return *obj.LockedTransferV1
}

func NewDelegateArgs_LockedTransferV1(amount uint64, lockedAddress common.PublicKey, authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		LockedTransferV1: &DelegateArgsLockedTransferV1{
			Amount:            amount,
			LockedAddress:     lockedAddress,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsProgrammableConfigV1() bool {
	return obj.ProgrammableConfigV1 != nil
}

func (obj *DelegateArgs) AsProgrammableConfigV1() DelegateArgsProgrammableConfigV1 {
	return *obj.ProgrammableConfigV1
}

func NewDelegateArgs_ProgrammableConfigV1(authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		ProgrammableConfigV1: &DelegateArgsProgrammableConfigV1{
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsAuthorityItemV1() bool {
	return obj.AuthorityItemV1 != nil
}

func (obj *DelegateArgs) AsAuthorityItemV1() DelegateArgsAuthorityItemV1 {
	return *obj.AuthorityItemV1
}

func NewDelegateArgs_AuthorityItemV1(authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		AuthorityItemV1: &DelegateArgsAuthorityItemV1{
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsDataItemV1() bool {
	return obj.DataItemV1 != nil
}

func (obj *DelegateArgs) AsDataItemV1() DelegateArgsDataItemV1 {
	return *obj.DataItemV1
}

func NewDelegateArgs_DataItemV1(authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		DataItemV1: &DelegateArgsDataItemV1{
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsCollectionItemV1() bool {
	return obj.CollectionItemV1 != nil
}

func (obj *DelegateArgs) AsCollectionItemV1() DelegateArgsCollectionItemV1 {
	return *obj.CollectionItemV1
}

func NewDelegateArgs_CollectionItemV1(authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		CollectionItemV1: &DelegateArgsCollectionItemV1{
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *DelegateArgs) IsProgrammableConfigItemV1() bool {
	return obj.ProgrammableConfigItemV1 != nil
}

func (obj *DelegateArgs) AsProgrammableConfigItemV1() DelegateArgsProgrammableConfigItemV1 {
	return *obj.ProgrammableConfigItemV1
}

func NewDelegateArgs_ProgrammableConfigItemV1(authorizationData *AuthorizationData) DelegateArgs {
	return DelegateArgs{
		ProgrammableConfigItemV1: &DelegateArgsProgrammableConfigItemV1{
			AuthorizationData: authorizationData,
		},
	}
}

// RevokeArgs Enum
type RevokeArgs binary.BorshEnum

const (
	RevokeArgsCollectionV1 RevokeArgs = iota
	RevokeArgsSaleV1
	RevokeArgsTransferV1
	RevokeArgsDataV1
	RevokeArgsUtilityV1
	RevokeArgsStakingV1
	RevokeArgsStandardV1
	RevokeArgsLockedTransferV1
	RevokeArgsProgrammableConfigV1
	RevokeArgsMigrationV1
	RevokeArgsAuthorityItemV1
	RevokeArgsDataItemV1
	RevokeArgsCollectionItemV1
	RevokeArgsProgrammableConfigItemV1
)

func (value RevokeArgs) String() string {
	switch value {
	case RevokeArgsCollectionV1:
		return "CollectionV1"
	case RevokeArgsSaleV1:
		return "SaleV1"
	case RevokeArgsTransferV1:
		return "TransferV1"
	case RevokeArgsDataV1:
		return "DataV1"
	case RevokeArgsUtilityV1:
		return "UtilityV1"
	case RevokeArgsStakingV1:
		return "StakingV1"
	case RevokeArgsStandardV1:
		return "StandardV1"
	case RevokeArgsLockedTransferV1:
		return "LockedTransferV1"
	case RevokeArgsProgrammableConfigV1:
		return "ProgrammableConfigV1"
	case RevokeArgsMigrationV1:
		return "MigrationV1"
	case RevokeArgsAuthorityItemV1:
		return "AuthorityItemV1"
	case RevokeArgsDataItemV1:
		return "DataItemV1"
	case RevokeArgsCollectionItemV1:
		return "CollectionItemV1"
	case RevokeArgsProgrammableConfigItemV1:
		return "ProgrammableConfigItemV1"
	default:
		return ""
	}
}

// MetadataDelegateRole Enum
type MetadataDelegateRole binary.BorshEnum

const (
	MetadataDelegateRoleAuthorityItem MetadataDelegateRole = iota
	MetadataDelegateRoleCollection
	MetadataDelegateRoleUse
	MetadataDelegateRoleData
	MetadataDelegateRoleProgrammableConfig
	MetadataDelegateRoleDataItem
	MetadataDelegateRoleCollectionItem
	MetadataDelegateRoleProgrammableConfigItem
)

func (value MetadataDelegateRole) String() string {
	switch value {
	case MetadataDelegateRoleAuthorityItem:
		return "AuthorityItem"
	case MetadataDelegateRoleCollection:
		return "Collection"
	case MetadataDelegateRoleUse:
		return "Use"
	case MetadataDelegateRoleData:
		return "Data"
	case MetadataDelegateRoleProgrammableConfig:
		return "ProgrammableConfig"
	case MetadataDelegateRoleDataItem:
		return "DataItem"
	case MetadataDelegateRoleCollectionItem:
		return "CollectionItem"
	case MetadataDelegateRoleProgrammableConfigItem:
		return "ProgrammableConfigItem"
	default:
		return ""
	}
}

// CreateArgs Enum
type CreateArgs struct {
	V1 *CreateArgsV1 `bin:"optional"`
}

type CreateArgsV1 struct {
	AssetData   AssetData
	Decimals    *uint8       `bin:"optional"`
	PrintSupply *PrintSupply `bin:"optional"`
}

func (obj *CreateArgsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.AssetData); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.Decimals != nil); err != nil {
		return err
	}
	if obj.Decimals != nil {
		if err = encoder.Encode(obj.Decimals); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.PrintSupply != nil); err != nil {
		return err
	}
	if obj.PrintSupply != nil {
		if err = encoder.Encode(obj.PrintSupply); err != nil {
			return err
		}
	}
	return nil
}

func (obj *CreateArgsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.AssetData); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Decimals); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.PrintSupply); err != nil {
			return err
		}
	}
	return nil
}

func (obj *CreateArgs) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "CreateArgs(Unknown)"
}

func (obj *CreateArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *CreateArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp CreateArgsV1
		if err = decoder.Decode(&tmp.AssetData); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.Decimals); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.PrintSupply); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *CreateArgs) IsV1() bool {
	return obj.V1 != nil
}

func (obj *CreateArgs) AsV1() CreateArgsV1 {
	return *obj.V1
}

func NewCreateArgs_V1(assetData AssetData, decimals *uint8, printSupply *PrintSupply) CreateArgs {
	return CreateArgs{
		V1: &CreateArgsV1{
			AssetData:   assetData,
			Decimals:    decimals,
			PrintSupply: printSupply,
		},
	}
}

// MintArgs Enum
type MintArgs struct {
	V1 *MintArgsV1 `bin:"optional"`
}

type MintArgsV1 struct {
	Amount            uint64
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *MintArgsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *MintArgsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *MintArgs) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "MintArgs(Unknown)"
}

func (obj *MintArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *MintArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp MintArgsV1
		if err = decoder.Decode(&tmp.Amount); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *MintArgs) IsV1() bool {
	return obj.V1 != nil
}

func (obj *MintArgs) AsV1() MintArgsV1 {
	return *obj.V1
}

func NewMintArgs_V1(amount uint64, authorizationData *AuthorizationData) MintArgs {
	return MintArgs{
		V1: &MintArgsV1{
			Amount:            amount,
			AuthorizationData: authorizationData,
		},
	}
}

// TransferArgs Enum
type TransferArgs struct {
	V1 *TransferArgsV1 `bin:"optional"`
}

type TransferArgsV1 struct {
	Amount            uint64
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *TransferArgsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Amount); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *TransferArgsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Amount); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *TransferArgs) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "TransferArgs(Unknown)"
}

func (obj *TransferArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *TransferArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp TransferArgsV1
		if err = decoder.Decode(&tmp.Amount); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *TransferArgs) IsV1() bool {
	return obj.V1 != nil
}

func (obj *TransferArgs) AsV1() TransferArgsV1 {
	return *obj.V1
}

func NewTransferArgs_V1(amount uint64, authorizationData *AuthorizationData) TransferArgs {
	return TransferArgs{
		V1: &TransferArgsV1{
			Amount:            amount,
			AuthorizationData: authorizationData,
		},
	}
}

// UpdateArgs Enum
type UpdateArgs struct {
	V1                                 *UpdateArgsV1                                 `bin:"optional"`
	AsUpdateAuthorityV2                *UpdateArgsAsUpdateAuthorityV2                `bin:"optional"`
	AsAuthorityItemDelegateV2          *UpdateArgsAsAuthorityItemDelegateV2          `bin:"optional"`
	AsCollectionDelegateV2             *UpdateArgsAsCollectionDelegateV2             `bin:"optional"`
	AsDataDelegateV2                   *UpdateArgsAsDataDelegateV2                   `bin:"optional"`
	AsProgrammableConfigDelegateV2     *UpdateArgsAsProgrammableConfigDelegateV2     `bin:"optional"`
	AsDataItemDelegateV2               *UpdateArgsAsDataItemDelegateV2               `bin:"optional"`
	AsCollectionItemDelegateV2         *UpdateArgsAsCollectionItemDelegateV2         `bin:"optional"`
	AsProgrammableConfigItemDelegateV2 *UpdateArgsAsProgrammableConfigItemDelegateV2 `bin:"optional"`
}

type UpdateArgsV1 struct {
	NewUpdateAuthority  *common.PublicKey `bin:"optional"`
	Data                *Data             `bin:"optional"`
	PrimarySaleHappened *bool             `bin:"optional"`
	IsMutable           *bool             `bin:"optional"`
	Collection          CollectionToggle
	CollectionDetails   CollectionDetailsToggle
	Uses                UsesToggle
	RuleSet             RuleSetToggle
	AuthorizationData   *AuthorizationData `bin:"optional"`
}

func (obj *UpdateArgsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.NewUpdateAuthority != nil); err != nil {
		return err
	}
	if obj.NewUpdateAuthority != nil {
		if err = encoder.Encode(obj.NewUpdateAuthority); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.Data != nil); err != nil {
		return err
	}
	if obj.Data != nil {
		if err = encoder.Encode(obj.Data); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.PrimarySaleHappened != nil); err != nil {
		return err
	}
	if obj.PrimarySaleHappened != nil {
		if err = encoder.Encode(obj.PrimarySaleHappened); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.IsMutable != nil); err != nil {
		return err
	}
	if obj.IsMutable != nil {
		if err = encoder.Encode(obj.IsMutable); err != nil {
			return err
		}
	}
	if err = encoder.Encode(&obj.Collection); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.CollectionDetails); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Uses); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.RuleSet); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.NewUpdateAuthority); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Data); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.PrimarySaleHappened); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.IsMutable); err != nil {
			return err
		}
	}
	if err = decoder.Decode(&obj.Collection); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.CollectionDetails); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Uses); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.RuleSet); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type UpdateArgsAsUpdateAuthorityV2 struct {
	NewUpdateAuthority  *common.PublicKey `bin:"optional"`
	Data                *Data             `bin:"optional"`
	PrimarySaleHappened *bool             `bin:"optional"`
	IsMutable           *bool             `bin:"optional"`
	Collection          CollectionToggle
	CollectionDetails   CollectionDetailsToggle
	Uses                UsesToggle
	RuleSet             RuleSetToggle
	TokenStandard       *TokenStandard     `bin:"optional"`
	AuthorizationData   *AuthorizationData `bin:"optional"`
}

func (obj *UpdateArgsAsUpdateAuthorityV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.NewUpdateAuthority != nil); err != nil {
		return err
	}
	if obj.NewUpdateAuthority != nil {
		if err = encoder.Encode(obj.NewUpdateAuthority); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.Data != nil); err != nil {
		return err
	}
	if obj.Data != nil {
		if err = encoder.Encode(obj.Data); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.PrimarySaleHappened != nil); err != nil {
		return err
	}
	if obj.PrimarySaleHappened != nil {
		if err = encoder.Encode(obj.PrimarySaleHappened); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.IsMutable != nil); err != nil {
		return err
	}
	if obj.IsMutable != nil {
		if err = encoder.Encode(obj.IsMutable); err != nil {
			return err
		}
	}
	if err = encoder.Encode(&obj.Collection); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.CollectionDetails); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Uses); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.RuleSet); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.TokenStandard != nil); err != nil {
		return err
	}
	if obj.TokenStandard != nil {
		if err = encoder.Encode(obj.TokenStandard); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgsAsUpdateAuthorityV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.NewUpdateAuthority); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Data); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.PrimarySaleHappened); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.IsMutable); err != nil {
			return err
		}
	}
	if err = decoder.Decode(&obj.Collection); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.CollectionDetails); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Uses); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.RuleSet); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.TokenStandard); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type UpdateArgsAsAuthorityItemDelegateV2 struct {
	NewUpdateAuthority  *common.PublicKey  `bin:"optional"`
	PrimarySaleHappened *bool              `bin:"optional"`
	IsMutable           *bool              `bin:"optional"`
	TokenStandard       *TokenStandard     `bin:"optional"`
	AuthorizationData   *AuthorizationData `bin:"optional"`
}

func (obj *UpdateArgsAsAuthorityItemDelegateV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.NewUpdateAuthority != nil); err != nil {
		return err
	}
	if obj.NewUpdateAuthority != nil {
		if err = encoder.Encode(obj.NewUpdateAuthority); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.PrimarySaleHappened != nil); err != nil {
		return err
	}
	if obj.PrimarySaleHappened != nil {
		if err = encoder.Encode(obj.PrimarySaleHappened); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.IsMutable != nil); err != nil {
		return err
	}
	if obj.IsMutable != nil {
		if err = encoder.Encode(obj.IsMutable); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.TokenStandard != nil); err != nil {
		return err
	}
	if obj.TokenStandard != nil {
		if err = encoder.Encode(obj.TokenStandard); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgsAsAuthorityItemDelegateV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.NewUpdateAuthority); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.PrimarySaleHappened); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.IsMutable); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.TokenStandard); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type UpdateArgsAsCollectionDelegateV2 struct {
	Collection        CollectionToggle
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *UpdateArgsAsCollectionDelegateV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Collection); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgsAsCollectionDelegateV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Collection); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type UpdateArgsAsDataDelegateV2 struct {
	Data              *Data              `bin:"optional"`
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *UpdateArgsAsDataDelegateV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.Data != nil); err != nil {
		return err
	}
	if obj.Data != nil {
		if err = encoder.Encode(obj.Data); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgsAsDataDelegateV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Data); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type UpdateArgsAsProgrammableConfigDelegateV2 struct {
	RuleSet           RuleSetToggle
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *UpdateArgsAsProgrammableConfigDelegateV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.RuleSet); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgsAsProgrammableConfigDelegateV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.RuleSet); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type UpdateArgsAsDataItemDelegateV2 struct {
	Data              *Data              `bin:"optional"`
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *UpdateArgsAsDataItemDelegateV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.Data != nil); err != nil {
		return err
	}
	if obj.Data != nil {
		if err = encoder.Encode(obj.Data); err != nil {
			return err
		}
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgsAsDataItemDelegateV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.Data); err != nil {
			return err
		}
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type UpdateArgsAsCollectionItemDelegateV2 struct {
	Collection        CollectionToggle
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *UpdateArgsAsCollectionItemDelegateV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Collection); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgsAsCollectionItemDelegateV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Collection); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

type UpdateArgsAsProgrammableConfigItemDelegateV2 struct {
	RuleSet           RuleSetToggle
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *UpdateArgsAsProgrammableConfigItemDelegateV2) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.RuleSet); err != nil {
		return err
	}
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgsAsProgrammableConfigItemDelegateV2) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.RuleSet); err != nil {
		return err
	}
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateArgs) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	if obj.AsUpdateAuthorityV2 != nil {
		return "AsUpdateAuthorityV2"
	}
	if obj.AsAuthorityItemDelegateV2 != nil {
		return "AsAuthorityItemDelegateV2"
	}
	if obj.AsCollectionDelegateV2 != nil {
		return "AsCollectionDelegateV2"
	}
	if obj.AsDataDelegateV2 != nil {
		return "AsDataDelegateV2"
	}
	if obj.AsProgrammableConfigDelegateV2 != nil {
		return "AsProgrammableConfigDelegateV2"
	}
	if obj.AsDataItemDelegateV2 != nil {
		return "AsDataItemDelegateV2"
	}
	if obj.AsCollectionItemDelegateV2 != nil {
		return "AsCollectionItemDelegateV2"
	}
	if obj.AsProgrammableConfigItemDelegateV2 != nil {
		return "AsProgrammableConfigItemDelegateV2"
	}
	return "UpdateArgs(Unknown)"
}

func (obj *UpdateArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	if obj.AsUpdateAuthorityV2 != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.AsUpdateAuthorityV2); err != nil {
			return err
		}
		return nil
	}
	if obj.AsAuthorityItemDelegateV2 != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.AsAuthorityItemDelegateV2); err != nil {
			return err
		}
		return nil
	}
	if obj.AsCollectionDelegateV2 != nil {
		if err = encoder.WriteUint8(uint8(0x3)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.AsCollectionDelegateV2); err != nil {
			return err
		}
		return nil
	}
	if obj.AsDataDelegateV2 != nil {
		if err = encoder.WriteUint8(uint8(0x4)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.AsDataDelegateV2); err != nil {
			return err
		}
		return nil
	}
	if obj.AsProgrammableConfigDelegateV2 != nil {
		if err = encoder.WriteUint8(uint8(0x5)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.AsProgrammableConfigDelegateV2); err != nil {
			return err
		}
		return nil
	}
	if obj.AsDataItemDelegateV2 != nil {
		if err = encoder.WriteUint8(uint8(0x6)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.AsDataItemDelegateV2); err != nil {
			return err
		}
		return nil
	}
	if obj.AsCollectionItemDelegateV2 != nil {
		if err = encoder.WriteUint8(uint8(0x7)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.AsCollectionItemDelegateV2); err != nil {
			return err
		}
		return nil
	}
	if obj.AsProgrammableConfigItemDelegateV2 != nil {
		if err = encoder.WriteUint8(uint8(0x8)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.AsProgrammableConfigItemDelegateV2); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *UpdateArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp UpdateArgsV1
		if err = decoder.Decode(&tmp.NewUpdateAuthority); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.Data); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.PrimarySaleHappened); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.IsMutable); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.Collection); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.CollectionDetails); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.Uses); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.RuleSet); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	} else if idx == uint8(0x1) {
		var tmp UpdateArgsAsUpdateAuthorityV2
		if err = decoder.Decode(&tmp.NewUpdateAuthority); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.Data); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.PrimarySaleHappened); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.IsMutable); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.Collection); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.CollectionDetails); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.Uses); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.RuleSet); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.TokenStandard); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.AsUpdateAuthorityV2 = &tmp
		return nil
	} else if idx == uint8(0x2) {
		var tmp UpdateArgsAsAuthorityItemDelegateV2
		if err = decoder.Decode(&tmp.NewUpdateAuthority); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.PrimarySaleHappened); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.IsMutable); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.TokenStandard); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.AsAuthorityItemDelegateV2 = &tmp
		return nil
	} else if idx == uint8(0x3) {
		var tmp UpdateArgsAsCollectionDelegateV2
		if err = decoder.Decode(&tmp.Collection); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.AsCollectionDelegateV2 = &tmp
		return nil
	} else if idx == uint8(0x4) {
		var tmp UpdateArgsAsDataDelegateV2
		if err = decoder.Decode(&tmp.Data); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.AsDataDelegateV2 = &tmp
		return nil
	} else if idx == uint8(0x5) {
		var tmp UpdateArgsAsProgrammableConfigDelegateV2
		if err = decoder.Decode(&tmp.RuleSet); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.AsProgrammableConfigDelegateV2 = &tmp
		return nil
	} else if idx == uint8(0x6) {
		var tmp UpdateArgsAsDataItemDelegateV2
		if err = decoder.Decode(&tmp.Data); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.AsDataItemDelegateV2 = &tmp
		return nil
	} else if idx == uint8(0x7) {
		var tmp UpdateArgsAsCollectionItemDelegateV2
		if err = decoder.Decode(&tmp.Collection); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.AsCollectionItemDelegateV2 = &tmp
		return nil
	} else if idx == uint8(0x8) {
		var tmp UpdateArgsAsProgrammableConfigItemDelegateV2
		if err = decoder.Decode(&tmp.RuleSet); err != nil {
			return err
		}
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.AsProgrammableConfigItemDelegateV2 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *UpdateArgs) IsV1() bool {
	return obj.V1 != nil
}

func (obj *UpdateArgs) AsV1() UpdateArgsV1 {
	return *obj.V1
}

func NewUpdateArgs_V1(newUpdateAuthority *common.PublicKey, data *Data, primarySaleHappened *bool, isMutable *bool, collection CollectionToggle, collectionDetails CollectionDetailsToggle, uses UsesToggle, ruleSet RuleSetToggle, authorizationData *AuthorizationData) UpdateArgs {
	return UpdateArgs{
		V1: &UpdateArgsV1{
			NewUpdateAuthority:  newUpdateAuthority,
			Data:                data,
			PrimarySaleHappened: primarySaleHappened,
			IsMutable:           isMutable,
			Collection:          collection,
			CollectionDetails:   collectionDetails,
			Uses:                uses,
			RuleSet:             ruleSet,
			AuthorizationData:   authorizationData,
		},
	}
}

func (obj *UpdateArgs) IsAsUpdateAuthorityV2() bool {
	return obj.AsUpdateAuthorityV2 != nil
}

func (obj *UpdateArgs) AsAsUpdateAuthorityV2() UpdateArgsAsUpdateAuthorityV2 {
	return *obj.AsUpdateAuthorityV2
}

func NewUpdateArgs_AsUpdateAuthorityV2(newUpdateAuthority *common.PublicKey, data *Data, primarySaleHappened *bool, isMutable *bool, collection CollectionToggle, collectionDetails CollectionDetailsToggle, uses UsesToggle, ruleSet RuleSetToggle, tokenStandard *TokenStandard, authorizationData *AuthorizationData) UpdateArgs {
	return UpdateArgs{
		AsUpdateAuthorityV2: &UpdateArgsAsUpdateAuthorityV2{
			NewUpdateAuthority:  newUpdateAuthority,
			Data:                data,
			PrimarySaleHappened: primarySaleHappened,
			IsMutable:           isMutable,
			Collection:          collection,
			CollectionDetails:   collectionDetails,
			Uses:                uses,
			RuleSet:             ruleSet,
			TokenStandard:       tokenStandard,
			AuthorizationData:   authorizationData,
		},
	}
}

func (obj *UpdateArgs) IsAsAuthorityItemDelegateV2() bool {
	return obj.AsAuthorityItemDelegateV2 != nil
}

func (obj *UpdateArgs) AsAsAuthorityItemDelegateV2() UpdateArgsAsAuthorityItemDelegateV2 {
	return *obj.AsAuthorityItemDelegateV2
}

func NewUpdateArgs_AsAuthorityItemDelegateV2(newUpdateAuthority *common.PublicKey, primarySaleHappened *bool, isMutable *bool, tokenStandard *TokenStandard, authorizationData *AuthorizationData) UpdateArgs {
	return UpdateArgs{
		AsAuthorityItemDelegateV2: &UpdateArgsAsAuthorityItemDelegateV2{
			NewUpdateAuthority:  newUpdateAuthority,
			PrimarySaleHappened: primarySaleHappened,
			IsMutable:           isMutable,
			TokenStandard:       tokenStandard,
			AuthorizationData:   authorizationData,
		},
	}
}

func (obj *UpdateArgs) IsAsCollectionDelegateV2() bool {
	return obj.AsCollectionDelegateV2 != nil
}

func (obj *UpdateArgs) AsAsCollectionDelegateV2() UpdateArgsAsCollectionDelegateV2 {
	return *obj.AsCollectionDelegateV2
}

func NewUpdateArgs_AsCollectionDelegateV2(collection CollectionToggle, authorizationData *AuthorizationData) UpdateArgs {
	return UpdateArgs{
		AsCollectionDelegateV2: &UpdateArgsAsCollectionDelegateV2{
			Collection:        collection,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *UpdateArgs) IsAsDataDelegateV2() bool {
	return obj.AsDataDelegateV2 != nil
}

func (obj *UpdateArgs) AsAsDataDelegateV2() UpdateArgsAsDataDelegateV2 {
	return *obj.AsDataDelegateV2
}

func NewUpdateArgs_AsDataDelegateV2(data *Data, authorizationData *AuthorizationData) UpdateArgs {
	return UpdateArgs{
		AsDataDelegateV2: &UpdateArgsAsDataDelegateV2{
			Data:              data,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *UpdateArgs) IsAsProgrammableConfigDelegateV2() bool {
	return obj.AsProgrammableConfigDelegateV2 != nil
}

func (obj *UpdateArgs) AsAsProgrammableConfigDelegateV2() UpdateArgsAsProgrammableConfigDelegateV2 {
	return *obj.AsProgrammableConfigDelegateV2
}

func NewUpdateArgs_AsProgrammableConfigDelegateV2(ruleSet RuleSetToggle, authorizationData *AuthorizationData) UpdateArgs {
	return UpdateArgs{
		AsProgrammableConfigDelegateV2: &UpdateArgsAsProgrammableConfigDelegateV2{
			RuleSet:           ruleSet,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *UpdateArgs) IsAsDataItemDelegateV2() bool {
	return obj.AsDataItemDelegateV2 != nil
}

func (obj *UpdateArgs) AsAsDataItemDelegateV2() UpdateArgsAsDataItemDelegateV2 {
	return *obj.AsDataItemDelegateV2
}

func NewUpdateArgs_AsDataItemDelegateV2(data *Data, authorizationData *AuthorizationData) UpdateArgs {
	return UpdateArgs{
		AsDataItemDelegateV2: &UpdateArgsAsDataItemDelegateV2{
			Data:              data,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *UpdateArgs) IsAsCollectionItemDelegateV2() bool {
	return obj.AsCollectionItemDelegateV2 != nil
}

func (obj *UpdateArgs) AsAsCollectionItemDelegateV2() UpdateArgsAsCollectionItemDelegateV2 {
	return *obj.AsCollectionItemDelegateV2
}

func NewUpdateArgs_AsCollectionItemDelegateV2(collection CollectionToggle, authorizationData *AuthorizationData) UpdateArgs {
	return UpdateArgs{
		AsCollectionItemDelegateV2: &UpdateArgsAsCollectionItemDelegateV2{
			Collection:        collection,
			AuthorizationData: authorizationData,
		},
	}
}

func (obj *UpdateArgs) IsAsProgrammableConfigItemDelegateV2() bool {
	return obj.AsProgrammableConfigItemDelegateV2 != nil
}

func (obj *UpdateArgs) AsAsProgrammableConfigItemDelegateV2() UpdateArgsAsProgrammableConfigItemDelegateV2 {
	return *obj.AsProgrammableConfigItemDelegateV2
}

func NewUpdateArgs_AsProgrammableConfigItemDelegateV2(ruleSet RuleSetToggle, authorizationData *AuthorizationData) UpdateArgs {
	return UpdateArgs{
		AsProgrammableConfigItemDelegateV2: &UpdateArgsAsProgrammableConfigItemDelegateV2{
			RuleSet:           ruleSet,
			AuthorizationData: authorizationData,
		},
	}
}

// CollectionToggle Enum
type CollectionToggle struct {
	None  *struct{}            `bin:"optional"`
	Clear *struct{}            `bin:"optional"`
	Set   *CollectionToggleSet `bin:"optional"`
}

type CollectionToggleSet struct {
	Field0 Collection
}

func (obj *CollectionToggleSet) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *CollectionToggleSet) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *CollectionToggle) String() string {
	if obj.None != nil {
		return "None"
	}
	if obj.Clear != nil {
		return "Clear"
	}
	if obj.Set != nil {
		return "Set"
	}
	return "CollectionToggle(Unknown)"
}

func (obj *CollectionToggle) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.None != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		return nil
	}
	if obj.Clear != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		return nil
	}
	if obj.Set != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Set); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *CollectionToggle) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		obj.None = &struct{}{}
		return nil
	} else if idx == uint8(0x1) {
		obj.Clear = &struct{}{}
		return nil
	} else if idx == uint8(0x2) {
		var tmp CollectionToggleSet
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Set = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *CollectionToggle) IsNone() bool {
	return obj.None != nil
}

func NewCollectionToggle_None() CollectionToggle {
	return CollectionToggle{
		None: &struct{}{},
	}
}

func (obj *CollectionToggle) IsClear() bool {
	return obj.Clear != nil
}

func NewCollectionToggle_Clear() CollectionToggle {
	return CollectionToggle{
		Clear: &struct{}{},
	}
}

func (obj *CollectionToggle) IsSet() bool {
	return obj.Set != nil
}

func (obj *CollectionToggle) AsSet() CollectionToggleSet {
	return *obj.Set
}

func NewCollectionToggle_Set(field0 Collection) CollectionToggle {
	return CollectionToggle{
		Set: &CollectionToggleSet{
			Field0: field0,
		},
	}
}

// UsesToggle Enum
type UsesToggle struct {
	None  *struct{}      `bin:"optional"`
	Clear *struct{}      `bin:"optional"`
	Set   *UsesToggleSet `bin:"optional"`
}

type UsesToggleSet struct {
	Field0 Uses
}

func (obj *UsesToggleSet) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *UsesToggleSet) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *UsesToggle) String() string {
	if obj.None != nil {
		return "None"
	}
	if obj.Clear != nil {
		return "Clear"
	}
	if obj.Set != nil {
		return "Set"
	}
	return "UsesToggle(Unknown)"
}

func (obj *UsesToggle) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.None != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		return nil
	}
	if obj.Clear != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		return nil
	}
	if obj.Set != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Set); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *UsesToggle) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		obj.None = &struct{}{}
		return nil
	} else if idx == uint8(0x1) {
		obj.Clear = &struct{}{}
		return nil
	} else if idx == uint8(0x2) {
		var tmp UsesToggleSet
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Set = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *UsesToggle) IsNone() bool {
	return obj.None != nil
}

func NewUsesToggle_None() UsesToggle {
	return UsesToggle{
		None: &struct{}{},
	}
}

func (obj *UsesToggle) IsClear() bool {
	return obj.Clear != nil
}

func NewUsesToggle_Clear() UsesToggle {
	return UsesToggle{
		Clear: &struct{}{},
	}
}

func (obj *UsesToggle) IsSet() bool {
	return obj.Set != nil
}

func (obj *UsesToggle) AsSet() UsesToggleSet {
	return *obj.Set
}

func NewUsesToggle_Set(field0 Uses) UsesToggle {
	return UsesToggle{
		Set: &UsesToggleSet{
			Field0: field0,
		},
	}
}

// CollectionDetailsToggle Enum
type CollectionDetailsToggle struct {
	None  *struct{}                   `bin:"optional"`
	Clear *struct{}                   `bin:"optional"`
	Set   *CollectionDetailsToggleSet `bin:"optional"`
}

type CollectionDetailsToggleSet struct {
	Field0 CollectionDetails
}

func (obj *CollectionDetailsToggleSet) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *CollectionDetailsToggleSet) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *CollectionDetailsToggle) String() string {
	if obj.None != nil {
		return "None"
	}
	if obj.Clear != nil {
		return "Clear"
	}
	if obj.Set != nil {
		return "Set"
	}
	return "CollectionDetailsToggle(Unknown)"
}

func (obj *CollectionDetailsToggle) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.None != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		return nil
	}
	if obj.Clear != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		return nil
	}
	if obj.Set != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Set); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *CollectionDetailsToggle) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		obj.None = &struct{}{}
		return nil
	} else if idx == uint8(0x1) {
		obj.Clear = &struct{}{}
		return nil
	} else if idx == uint8(0x2) {
		var tmp CollectionDetailsToggleSet
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Set = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *CollectionDetailsToggle) IsNone() bool {
	return obj.None != nil
}

func NewCollectionDetailsToggle_None() CollectionDetailsToggle {
	return CollectionDetailsToggle{
		None: &struct{}{},
	}
}

func (obj *CollectionDetailsToggle) IsClear() bool {
	return obj.Clear != nil
}

func NewCollectionDetailsToggle_Clear() CollectionDetailsToggle {
	return CollectionDetailsToggle{
		Clear: &struct{}{},
	}
}

func (obj *CollectionDetailsToggle) IsSet() bool {
	return obj.Set != nil
}

func (obj *CollectionDetailsToggle) AsSet() CollectionDetailsToggleSet {
	return *obj.Set
}

func NewCollectionDetailsToggle_Set(field0 CollectionDetails) CollectionDetailsToggle {
	return CollectionDetailsToggle{
		Set: &CollectionDetailsToggleSet{
			Field0: field0,
		},
	}
}

// RuleSetToggle Enum
type RuleSetToggle struct {
	None  *struct{}         `bin:"optional"`
	Clear *struct{}         `bin:"optional"`
	Set   *RuleSetToggleSet `bin:"optional"`
}

type RuleSetToggleSet struct {
	Field0 common.PublicKey
}

func (obj *RuleSetToggleSet) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *RuleSetToggleSet) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *RuleSetToggle) String() string {
	if obj.None != nil {
		return "None"
	}
	if obj.Clear != nil {
		return "Clear"
	}
	if obj.Set != nil {
		return "Set"
	}
	return "RuleSetToggle(Unknown)"
}

func (obj *RuleSetToggle) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.None != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		return nil
	}
	if obj.Clear != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		return nil
	}
	if obj.Set != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Set); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *RuleSetToggle) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		obj.None = &struct{}{}
		return nil
	} else if idx == uint8(0x1) {
		obj.Clear = &struct{}{}
		return nil
	} else if idx == uint8(0x2) {
		var tmp RuleSetToggleSet
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Set = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *RuleSetToggle) IsNone() bool {
	return obj.None != nil
}

func NewRuleSetToggle_None() RuleSetToggle {
	return RuleSetToggle{
		None: &struct{}{},
	}
}

func (obj *RuleSetToggle) IsClear() bool {
	return obj.Clear != nil
}

func NewRuleSetToggle_Clear() RuleSetToggle {
	return RuleSetToggle{
		Clear: &struct{}{},
	}
}

func (obj *RuleSetToggle) IsSet() bool {
	return obj.Set != nil
}

func (obj *RuleSetToggle) AsSet() RuleSetToggleSet {
	return *obj.Set
}

func NewRuleSetToggle_Set(field0 common.PublicKey) RuleSetToggle {
	return RuleSetToggle{
		Set: &RuleSetToggleSet{
			Field0: field0,
		},
	}
}

// PrintArgs Enum
type PrintArgs struct {
	V1 *PrintArgsV1 `bin:"optional"`
}

type PrintArgsV1 struct {
	Edition uint64
}

func (obj *PrintArgsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Edition); err != nil {
		return err
	}
	return nil
}

func (obj *PrintArgsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Edition); err != nil {
		return err
	}
	return nil
}

func (obj *PrintArgs) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "PrintArgs(Unknown)"
}

func (obj *PrintArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *PrintArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp PrintArgsV1
		if err = decoder.Decode(&tmp.Edition); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *PrintArgs) IsV1() bool {
	return obj.V1 != nil
}

func (obj *PrintArgs) AsV1() PrintArgsV1 {
	return *obj.V1
}

func NewPrintArgs_V1(edition uint64) PrintArgs {
	return PrintArgs{
		V1: &PrintArgsV1{
			Edition: edition,
		},
	}
}

// LockArgs Enum
type LockArgs struct {
	V1 *LockArgsV1 `bin:"optional"`
}

type LockArgsV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *LockArgsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *LockArgsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *LockArgs) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "LockArgs(Unknown)"
}

func (obj *LockArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *LockArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp LockArgsV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *LockArgs) IsV1() bool {
	return obj.V1 != nil
}

func (obj *LockArgs) AsV1() LockArgsV1 {
	return *obj.V1
}

func NewLockArgs_V1(authorizationData *AuthorizationData) LockArgs {
	return LockArgs{
		V1: &LockArgsV1{
			AuthorizationData: authorizationData,
		},
	}
}

// UnlockArgs Enum
type UnlockArgs struct {
	V1 *UnlockArgsV1 `bin:"optional"`
}

type UnlockArgsV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *UnlockArgsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UnlockArgsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UnlockArgs) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "UnlockArgs(Unknown)"
}

func (obj *UnlockArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *UnlockArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp UnlockArgsV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *UnlockArgs) IsV1() bool {
	return obj.V1 != nil
}

func (obj *UnlockArgs) AsV1() UnlockArgsV1 {
	return *obj.V1
}

func NewUnlockArgs_V1(authorizationData *AuthorizationData) UnlockArgs {
	return UnlockArgs{
		V1: &UnlockArgsV1{
			AuthorizationData: authorizationData,
		},
	}
}

// UseArgs Enum
type UseArgs struct {
	V1 *UseArgsV1 `bin:"optional"`
}

type UseArgsV1 struct {
	AuthorizationData *AuthorizationData `bin:"optional"`
}

func (obj *UseArgsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.AuthorizationData != nil); err != nil {
		return err
	}
	if obj.AuthorizationData != nil {
		if err = encoder.Encode(obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UseArgsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.AuthorizationData); err != nil {
			return err
		}
	}
	return nil
}

func (obj *UseArgs) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "UseArgs(Unknown)"
}

func (obj *UseArgs) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *UseArgs) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp UseArgsV1
		if err = decoder.Decode(&tmp.AuthorizationData); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *UseArgs) IsV1() bool {
	return obj.V1 != nil
}

func (obj *UseArgs) AsV1() UseArgsV1 {
	return *obj.V1
}

func NewUseArgs_V1(authorizationData *AuthorizationData) UseArgs {
	return UseArgs{
		V1: &UseArgsV1{
			AuthorizationData: authorizationData,
		},
	}
}

// VerificationArgs Enum
type VerificationArgs binary.BorshEnum

const (
	VerificationArgsCreatorV1 VerificationArgs = iota
	VerificationArgsCollectionV1
)

func (value VerificationArgs) String() string {
	switch value {
	case VerificationArgsCreatorV1:
		return "CreatorV1"
	case VerificationArgsCollectionV1:
		return "CollectionV1"
	default:
		return ""
	}
}

// TokenStandard Enum
type TokenStandard binary.BorshEnum

const (
	TokenStandardNonFungible TokenStandard = iota
	TokenStandardFungibleAsset
	TokenStandardFungible
	TokenStandardNonFungibleEdition
	TokenStandardProgrammableNonFungible
	TokenStandardProgrammableNonFungibleEdition
)

func (value TokenStandard) String() string {
	switch value {
	case TokenStandardNonFungible:
		return "NonFungible"
	case TokenStandardFungibleAsset:
		return "FungibleAsset"
	case TokenStandardFungible:
		return "Fungible"
	case TokenStandardNonFungibleEdition:
		return "NonFungibleEdition"
	case TokenStandardProgrammableNonFungible:
		return "ProgrammableNonFungible"
	case TokenStandardProgrammableNonFungibleEdition:
		return "ProgrammableNonFungibleEdition"
	default:
		return ""
	}
}

// Key Enum
type Key binary.BorshEnum

const (
	KeyUninitialized Key = iota
	KeyEditionV1
	KeyMasterEditionV1
	KeyReservationListV1
	KeyMetadataV1
	KeyReservationListV2
	KeyMasterEditionV2
	KeyEditionMarker
	KeyUseAuthorityRecord
	KeyCollectionAuthorityRecord
	KeyTokenOwnedEscrow
	KeyTokenRecord
	KeyMetadataDelegate
	KeyEditionMarkerV2
)

func (value Key) String() string {
	switch value {
	case KeyUninitialized:
		return "Uninitialized"
	case KeyEditionV1:
		return "EditionV1"
	case KeyMasterEditionV1:
		return "MasterEditionV1"
	case KeyReservationListV1:
		return "ReservationListV1"
	case KeyMetadataV1:
		return "MetadataV1"
	case KeyReservationListV2:
		return "ReservationListV2"
	case KeyMasterEditionV2:
		return "MasterEditionV2"
	case KeyEditionMarker:
		return "EditionMarker"
	case KeyUseAuthorityRecord:
		return "UseAuthorityRecord"
	case KeyCollectionAuthorityRecord:
		return "CollectionAuthorityRecord"
	case KeyTokenOwnedEscrow:
		return "TokenOwnedEscrow"
	case KeyTokenRecord:
		return "TokenRecord"
	case KeyMetadataDelegate:
		return "MetadataDelegate"
	case KeyEditionMarkerV2:
		return "EditionMarkerV2"
	default:
		return ""
	}
}

// CollectionDetails Enum
type CollectionDetails struct {
	V1 *CollectionDetailsV1 `bin:"optional"`
}

type CollectionDetailsV1 struct {
	Size uint64
}

func (obj *CollectionDetailsV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Size); err != nil {
		return err
	}
	return nil
}

func (obj *CollectionDetailsV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Size); err != nil {
		return err
	}
	return nil
}

func (obj *CollectionDetails) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "CollectionDetails(Unknown)"
}

func (obj *CollectionDetails) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *CollectionDetails) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp CollectionDetailsV1
		if err = decoder.Decode(&tmp.Size); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *CollectionDetails) IsV1() bool {
	return obj.V1 != nil
}

func (obj *CollectionDetails) AsV1() CollectionDetailsV1 {
	return *obj.V1
}

func NewCollectionDetails_V1(size uint64) CollectionDetails {
	return CollectionDetails{
		V1: &CollectionDetailsV1{
			Size: size,
		},
	}
}

// EscrowAuthority Enum
type EscrowAuthority struct {
	TokenOwner  *struct{}               `bin:"optional"`
	Creator     *EscrowAuthorityCreator `bin:"optional"`
	Cd          *EscrowAuthorityCd      `bin:"optional"`
	TokenOwner2 *struct{}               `bin:"optional"`
}

type EscrowAuthorityCreator struct {
	Field0 common.PublicKey
}

func (obj *EscrowAuthorityCreator) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *EscrowAuthorityCreator) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

type EscrowAuthorityCd struct {
	Field0 common.PublicKey
}

func (obj *EscrowAuthorityCd) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *EscrowAuthorityCd) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *EscrowAuthority) String() string {
	if obj.TokenOwner != nil {
		return "TokenOwner"
	}
	if obj.Creator != nil {
		return "Creator"
	}
	if obj.Cd != nil {
		return "Cd"
	}
	if obj.TokenOwner2 != nil {
		return "TokenOwner2"
	}
	return "EscrowAuthority(Unknown)"
}

func (obj *EscrowAuthority) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.TokenOwner != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		return nil
	}
	if obj.Creator != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Creator); err != nil {
			return err
		}
		return nil
	}
	if obj.Cd != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Cd); err != nil {
			return err
		}
		return nil
	}
	if obj.TokenOwner2 != nil {
		if err = encoder.WriteUint8(uint8(0x3)); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *EscrowAuthority) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		obj.TokenOwner = &struct{}{}
		return nil
	} else if idx == uint8(0x1) {
		var tmp EscrowAuthorityCreator
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Creator = &tmp
		return nil
	} else if idx == uint8(0x2) {
		var tmp EscrowAuthorityCd
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Cd = &tmp
		return nil
	} else if idx == uint8(0x3) {
		obj.TokenOwner2 = &struct{}{}
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *EscrowAuthority) IsTokenOwner() bool {
	return obj.TokenOwner != nil
}

func NewEscrowAuthority_TokenOwner() EscrowAuthority {
	return EscrowAuthority{
		TokenOwner: &struct{}{},
	}
}

func (obj *EscrowAuthority) IsCreator() bool {
	return obj.Creator != nil
}

func (obj *EscrowAuthority) AsCreator() EscrowAuthorityCreator {
	return *obj.Creator
}

func NewEscrowAuthority_Creator(field0 common.PublicKey) EscrowAuthority {
	return EscrowAuthority{
		Creator: &EscrowAuthorityCreator{
			Field0: field0,
		},
	}
}

func (obj *EscrowAuthority) IsCd() bool {
	return obj.Cd != nil
}

func (obj *EscrowAuthority) AsCd() EscrowAuthorityCd {
	return *obj.Cd
}

func NewEscrowAuthority_Cd(field0 common.PublicKey) EscrowAuthority {
	return EscrowAuthority{
		Cd: &EscrowAuthorityCd{
			Field0: field0,
		},
	}
}

func (obj *EscrowAuthority) IsTokenOwner2() bool {
	return obj.TokenOwner2 != nil
}

func NewEscrowAuthority_TokenOwner2() EscrowAuthority {
	return EscrowAuthority{
		TokenOwner2: &struct{}{},
	}
}

// PrintSupply Enum
type PrintSupply struct {
	Zero      *struct{}           `bin:"optional"`
	Limited   *PrintSupplyLimited `bin:"optional"`
	Unlimited *struct{}           `bin:"optional"`
}

type PrintSupplyLimited struct {
	Field0 uint64
}

func (obj *PrintSupplyLimited) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *PrintSupplyLimited) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *PrintSupply) String() string {
	if obj.Zero != nil {
		return "Zero"
	}
	if obj.Limited != nil {
		return "Limited"
	}
	if obj.Unlimited != nil {
		return "Unlimited"
	}
	return "PrintSupply(Unknown)"
}

func (obj *PrintSupply) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.Zero != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		return nil
	}
	if obj.Limited != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Limited); err != nil {
			return err
		}
		return nil
	}
	if obj.Unlimited != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *PrintSupply) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		obj.Zero = &struct{}{}
		return nil
	} else if idx == uint8(0x1) {
		var tmp PrintSupplyLimited
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Limited = &tmp
		return nil
	} else if idx == uint8(0x2) {
		obj.Unlimited = &struct{}{}
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *PrintSupply) IsZero() bool {
	return obj.Zero != nil
}

func NewPrintSupply_Zero() PrintSupply {
	return PrintSupply{
		Zero: &struct{}{},
	}
}

func (obj *PrintSupply) IsLimited() bool {
	return obj.Limited != nil
}

func (obj *PrintSupply) AsLimited() PrintSupplyLimited {
	return *obj.Limited
}

func NewPrintSupply_Limited(field0 uint64) PrintSupply {
	return PrintSupply{
		Limited: &PrintSupplyLimited{
			Field0: field0,
		},
	}
}

func (obj *PrintSupply) IsUnlimited() bool {
	return obj.Unlimited != nil
}

func NewPrintSupply_Unlimited() PrintSupply {
	return PrintSupply{
		Unlimited: &struct{}{},
	}
}

// ProgrammableConfig Enum
type ProgrammableConfig struct {
	V1 *ProgrammableConfigV1 `bin:"optional"`
}

type ProgrammableConfigV1 struct {
	RuleSet *common.PublicKey `bin:"optional"`
}

func (obj *ProgrammableConfigV1) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.WriteBool(obj.RuleSet != nil); err != nil {
		return err
	}
	if obj.RuleSet != nil {
		if err = encoder.Encode(obj.RuleSet); err != nil {
			return err
		}
	}
	return nil
}

func (obj *ProgrammableConfigV1) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if ok, err := decoder.ReadBool(); err != nil {
		return err
	} else if ok {
		if err = decoder.Decode(&obj.RuleSet); err != nil {
			return err
		}
	}
	return nil
}

func (obj *ProgrammableConfig) String() string {
	if obj.V1 != nil {
		return "V1"
	}
	return "ProgrammableConfig(Unknown)"
}

func (obj *ProgrammableConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.V1 != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.V1); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *ProgrammableConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp ProgrammableConfigV1
		if err = decoder.Decode(&tmp.RuleSet); err != nil {
			return err
		}
		obj.V1 = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *ProgrammableConfig) IsV1() bool {
	return obj.V1 != nil
}

func (obj *ProgrammableConfig) AsV1() ProgrammableConfigV1 {
	return *obj.V1
}

func NewProgrammableConfig_V1(ruleSet *common.PublicKey) ProgrammableConfig {
	return ProgrammableConfig{
		V1: &ProgrammableConfigV1{
			RuleSet: ruleSet,
		},
	}
}

// MigrationType Enum
type MigrationType binary.BorshEnum

const (
	MigrationTypeCollectionV1 MigrationType = iota
	MigrationTypeProgrammableV1
)

func (value MigrationType) String() string {
	switch value {
	case MigrationTypeCollectionV1:
		return "CollectionV1"
	case MigrationTypeProgrammableV1:
		return "ProgrammableV1"
	default:
		return ""
	}
}

// TokenState Enum
type TokenState binary.BorshEnum

const (
	TokenStateUnlocked TokenState = iota
	TokenStateLocked
	TokenStateListed
)

func (value TokenState) String() string {
	switch value {
	case TokenStateUnlocked:
		return "Unlocked"
	case TokenStateLocked:
		return "Locked"
	case TokenStateListed:
		return "Listed"
	default:
		return ""
	}
}

// TokenDelegateRole Enum
type TokenDelegateRole binary.BorshEnum

const (
	TokenDelegateRoleSale TokenDelegateRole = iota
	TokenDelegateRoleTransfer
	TokenDelegateRoleUtility
	TokenDelegateRoleStaking
	TokenDelegateRoleStandard
	TokenDelegateRoleLockedTransfer
	TokenDelegateRoleMigration
)

func (value TokenDelegateRole) String() string {
	switch value {
	case TokenDelegateRoleSale:
		return "Sale"
	case TokenDelegateRoleTransfer:
		return "Transfer"
	case TokenDelegateRoleUtility:
		return "Utility"
	case TokenDelegateRoleStaking:
		return "Staking"
	case TokenDelegateRoleStandard:
		return "Standard"
	case TokenDelegateRoleLockedTransfer:
		return "LockedTransfer"
	case TokenDelegateRoleMigration:
		return "Migration"
	default:
		return ""
	}
}

// AuthorityType Enum
type AuthorityType binary.BorshEnum

const (
	AuthorityTypeNone AuthorityType = iota
	AuthorityTypeMetadata
	AuthorityTypeHolder
	AuthorityTypeMetadataDelegate
	AuthorityTypeTokenDelegate
)

func (value AuthorityType) String() string {
	switch value {
	case AuthorityTypeNone:
		return "None"
	case AuthorityTypeMetadata:
		return "Metadata"
	case AuthorityTypeHolder:
		return "Holder"
	case AuthorityTypeMetadataDelegate:
		return "MetadataDelegate"
	case AuthorityTypeTokenDelegate:
		return "TokenDelegate"
	default:
		return ""
	}
}

// PayloadKey Enum
type PayloadKey binary.BorshEnum

const (
	PayloadKeyAmount PayloadKey = iota
	PayloadKeyAuthority
	PayloadKeyAuthoritySeeds
	PayloadKeyDelegate
	PayloadKeyDelegateSeeds
	PayloadKeyDestination
	PayloadKeyDestinationSeeds
	PayloadKeyHolder
	PayloadKeySource
	PayloadKeySourceSeeds
)

func (value PayloadKey) String() string {
	switch value {
	case PayloadKeyAmount:
		return "Amount"
	case PayloadKeyAuthority:
		return "Authority"
	case PayloadKeyAuthoritySeeds:
		return "AuthoritySeeds"
	case PayloadKeyDelegate:
		return "Delegate"
	case PayloadKeyDelegateSeeds:
		return "DelegateSeeds"
	case PayloadKeyDestination:
		return "Destination"
	case PayloadKeyDestinationSeeds:
		return "DestinationSeeds"
	case PayloadKeyHolder:
		return "Holder"
	case PayloadKeySource:
		return "Source"
	case PayloadKeySourceSeeds:
		return "SourceSeeds"
	default:
		return ""
	}
}

// PayloadType Enum
type PayloadType struct {
	Pubkey      *PayloadTypePubkey      `bin:"optional"`
	Seeds       *PayloadTypeSeeds       `bin:"optional"`
	MerkleProof *PayloadTypeMerkleProof `bin:"optional"`
	Number      *PayloadTypeNumber      `bin:"optional"`
}

type PayloadTypePubkey struct {
	Field0 common.PublicKey
}

func (obj *PayloadTypePubkey) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *PayloadTypePubkey) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

type PayloadTypeSeeds struct {
	Field0 SeedsVec
}

func (obj *PayloadTypeSeeds) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *PayloadTypeSeeds) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

type PayloadTypeMerkleProof struct {
	Field0 ProofInfo
}

func (obj *PayloadTypeMerkleProof) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *PayloadTypeMerkleProof) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

type PayloadTypeNumber struct {
	Field0 uint64
}

func (obj *PayloadTypeNumber) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *PayloadTypeNumber) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *PayloadType) String() string {
	if obj.Pubkey != nil {
		return "Pubkey"
	}
	if obj.Seeds != nil {
		return "Seeds"
	}
	if obj.MerkleProof != nil {
		return "MerkleProof"
	}
	if obj.Number != nil {
		return "Number"
	}
	return "PayloadType(Unknown)"
}

func (obj *PayloadType) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.Pubkey != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Pubkey); err != nil {
			return err
		}
		return nil
	}
	if obj.Seeds != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Seeds); err != nil {
			return err
		}
		return nil
	}
	if obj.MerkleProof != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.MerkleProof); err != nil {
			return err
		}
		return nil
	}
	if obj.Number != nil {
		if err = encoder.WriteUint8(uint8(0x3)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Number); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *PayloadType) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		var tmp PayloadTypePubkey
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Pubkey = &tmp
		return nil
	} else if idx == uint8(0x1) {
		var tmp PayloadTypeSeeds
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Seeds = &tmp
		return nil
	} else if idx == uint8(0x2) {
		var tmp PayloadTypeMerkleProof
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.MerkleProof = &tmp
		return nil
	} else if idx == uint8(0x3) {
		var tmp PayloadTypeNumber
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Number = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *PayloadType) IsPubkey() bool {
	return obj.Pubkey != nil
}

func (obj *PayloadType) AsPubkey() PayloadTypePubkey {
	return *obj.Pubkey
}

func NewPayloadType_Pubkey(field0 common.PublicKey) PayloadType {
	return PayloadType{
		Pubkey: &PayloadTypePubkey{
			Field0: field0,
		},
	}
}

func (obj *PayloadType) IsSeeds() bool {
	return obj.Seeds != nil
}

func (obj *PayloadType) AsSeeds() PayloadTypeSeeds {
	return *obj.Seeds
}

func NewPayloadType_Seeds(field0 SeedsVec) PayloadType {
	return PayloadType{
		Seeds: &PayloadTypeSeeds{
			Field0: field0,
		},
	}
}

func (obj *PayloadType) IsMerkleProof() bool {
	return obj.MerkleProof != nil
}

func (obj *PayloadType) AsMerkleProof() PayloadTypeMerkleProof {
	return *obj.MerkleProof
}

func NewPayloadType_MerkleProof(field0 ProofInfo) PayloadType {
	return PayloadType{
		MerkleProof: &PayloadTypeMerkleProof{
			Field0: field0,
		},
	}
}

func (obj *PayloadType) IsNumber() bool {
	return obj.Number != nil
}

func (obj *PayloadType) AsNumber() PayloadTypeNumber {
	return *obj.Number
}

func NewPayloadType_Number(field0 uint64) PayloadType {
	return PayloadType{
		Number: &PayloadTypeNumber{
			Field0: field0,
		},
	}
}

// UseMethod Enum
type UseMethod binary.BorshEnum

const (
	UseMethodBurn UseMethod = iota
	UseMethodMultiple
	UseMethodSingle
)

func (value UseMethod) String() string {
	switch value {
	case UseMethodBurn:
		return "Burn"
	case UseMethodMultiple:
		return "Multiple"
	case UseMethodSingle:
		return "Single"
	default:
		return ""
	}
}
