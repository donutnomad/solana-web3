// This code was AUTOGENERATED using the library.
// Please DO NOT EDIT THIS FILE.

package token_metadata

import (
	common "github.com/donutnomad/solana-web3/common"
	binary "github.com/gagliardetto/binary"
)

// TokenMetadata Struct
type TokenMetadata struct {
	// The authority that can sign to update the metadata
	UpdateAuthority common.PublicKey
	// The associated mint, used to counter spoofing to be sure that metadata
	// belongs to a particular mint
	Mint common.PublicKey
	// The longer name of the token
	Name string
	// The shortened symbol for the token
	Symbol string
	// The URI pointing to richer metadata
	Uri string
	// Any additional metadata about the token as key-value pairs. The program
	// must avoid storing the same key twice.
	AdditionalMetadata []struct {
		Key   string
		Value string
	}
}

func (obj *TokenMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.UpdateAuthority); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Mint); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Name); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Symbol); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.Uri); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.AdditionalMetadata); err != nil {
		return err
	}
	return nil
}

func (obj *TokenMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.UpdateAuthority); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Mint); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Name); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Symbol); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.Uri); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.AdditionalMetadata); err != nil {
		return err
	}
	return nil
}
