// This code was AUTOGENERATED using the library.
// Please DO NOT EDIT THIS FILE.

package token_metadata

import (
	"errors"
	binary "github.com/gagliardetto/binary"
)

// Field Enum
type Field struct {
	Name   *struct{} `bin:"optional"`
	Symbol *struct{} `bin:"optional"`
	Uri    *struct{} `bin:"optional"`
	Key    *FieldKey `bin:"optional"`
}

type FieldKey struct {
	Field0 string
}

func (obj *FieldKey) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *FieldKey) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Field0); err != nil {
		return err
	}
	return nil
}

func (obj *Field) String() string {
	if obj.Name != nil {
		return "Name"
	}
	if obj.Symbol != nil {
		return "Symbol"
	}
	if obj.Uri != nil {
		return "Uri"
	}
	if obj.Key != nil {
		return "Key"
	}
	return "Field(Unknown)"
}

func (obj *Field) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if obj.Name != nil {
		if err = encoder.WriteUint8(uint8(0x0)); err != nil {
			return err
		}
		return nil
	}
	if obj.Symbol != nil {
		if err = encoder.WriteUint8(uint8(0x1)); err != nil {
			return err
		}
		return nil
	}
	if obj.Uri != nil {
		if err = encoder.WriteUint8(uint8(0x2)); err != nil {
			return err
		}
		return nil
	}
	if obj.Key != nil {
		if err = encoder.WriteUint8(uint8(0x3)); err != nil {
			return err
		}
		if err = encoder.Encode(obj.Key); err != nil {
			return err
		}
		return nil
	}
	return nil
}

func (obj *Field) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	idx, err := decoder.ReadUint8()
	if err != nil {
		return err
	}
	if idx == uint8(0x0) {
		obj.Name = &struct{}{}
		return nil
	} else if idx == uint8(0x1) {
		obj.Symbol = &struct{}{}
		return nil
	} else if idx == uint8(0x2) {
		obj.Uri = &struct{}{}
		return nil
	} else if idx == uint8(0x3) {
		var tmp FieldKey
		if err = decoder.Decode(&tmp.Field0); err != nil {
			return err
		}
		obj.Key = &tmp
		return nil
	}
	return errors.New("UnmarshalWithDecoder failed")
}

func (obj *Field) IsName() bool {
	return obj.Name != nil
}

func NewField_Name() Field {
	return Field{
		Name: &struct{}{},
	}
}

func (obj *Field) IsSymbol() bool {
	return obj.Symbol != nil
}

func NewField_Symbol() Field {
	return Field{
		Symbol: &struct{}{},
	}
}

func (obj *Field) IsUri() bool {
	return obj.Uri != nil
}

func NewField_Uri() Field {
	return Field{
		Uri: &struct{}{},
	}
}

func (obj *Field) IsKey() bool {
	return obj.Key != nil
}

func (obj *Field) AsKey() FieldKey {
	return *obj.Key
}

func NewField_Key(field0 string) Field {
	return Field{
		Key: &FieldKey{
			Field0: field0,
		},
	}
}
