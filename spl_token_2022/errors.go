// This code was AUTOGENERATED using the library.
// Please DO NOT EDIT THIS FILE.

package spl_token_2022

type ProgramError interface {
	Code() int
	Error() string
}

var codeToErrorMap = make(map[int]ProgramError)
var nameToErrorMap = make(map[string]ProgramError)

func init() {
	codeToErrorMap[0] = new(NotRentExemptError)
	nameToErrorMap["NotRentExempt"] = new(NotRentExemptError)
	codeToErrorMap[1] = new(InsufficientFundsError)
	nameToErrorMap["InsufficientFunds"] = new(InsufficientFundsError)
	codeToErrorMap[2] = new(InvalidMintError)
	nameToErrorMap["InvalidMint"] = new(InvalidMintError)
	codeToErrorMap[3] = new(MintMismatchError)
	nameToErrorMap["MintMismatch"] = new(MintMismatchError)
	codeToErrorMap[4] = new(OwnerMismatchError)
	nameToErrorMap["OwnerMismatch"] = new(OwnerMismatchError)
	codeToErrorMap[5] = new(FixedSupplyError)
	nameToErrorMap["FixedSupply"] = new(FixedSupplyError)
	codeToErrorMap[6] = new(AlreadyInUseError)
	nameToErrorMap["AlreadyInUse"] = new(AlreadyInUseError)
	codeToErrorMap[7] = new(InvalidNumberOfProvidedSignersError)
	nameToErrorMap["InvalidNumberOfProvidedSigners"] = new(InvalidNumberOfProvidedSignersError)
	codeToErrorMap[8] = new(InvalidNumberOfRequiredSignersError)
	nameToErrorMap["InvalidNumberOfRequiredSigners"] = new(InvalidNumberOfRequiredSignersError)
	codeToErrorMap[9] = new(UninitializedStateError)
	nameToErrorMap["UninitializedState"] = new(UninitializedStateError)
	codeToErrorMap[10] = new(NativeNotSupportedError)
	nameToErrorMap["NativeNotSupported"] = new(NativeNotSupportedError)
	codeToErrorMap[11] = new(NonNativeHasBalanceError)
	nameToErrorMap["NonNativeHasBalance"] = new(NonNativeHasBalanceError)
	codeToErrorMap[12] = new(InvalidInstructionError)
	nameToErrorMap["InvalidInstruction"] = new(InvalidInstructionError)
	codeToErrorMap[13] = new(InvalidStateError)
	nameToErrorMap["InvalidState"] = new(InvalidStateError)
	codeToErrorMap[14] = new(OverflowError)
	nameToErrorMap["Overflow"] = new(OverflowError)
	codeToErrorMap[15] = new(AuthorityTypeNotSupportedError)
	nameToErrorMap["AuthorityTypeNotSupported"] = new(AuthorityTypeNotSupportedError)
	codeToErrorMap[16] = new(MintCannotFreezeError)
	nameToErrorMap["MintCannotFreeze"] = new(MintCannotFreezeError)
	codeToErrorMap[17] = new(AccountFrozenError)
	nameToErrorMap["AccountFrozen"] = new(AccountFrozenError)
	codeToErrorMap[18] = new(MintDecimalsMismatchError)
	nameToErrorMap["MintDecimalsMismatch"] = new(MintDecimalsMismatchError)
	codeToErrorMap[19] = new(NonNativeNotSupportedError)
	nameToErrorMap["NonNativeNotSupported"] = new(NonNativeNotSupportedError)
	codeToErrorMap[20] = new(ExtensionTypeMismatchError)
	nameToErrorMap["ExtensionTypeMismatch"] = new(ExtensionTypeMismatchError)
	codeToErrorMap[21] = new(ExtensionBaseMismatchError)
	nameToErrorMap["ExtensionBaseMismatch"] = new(ExtensionBaseMismatchError)
	codeToErrorMap[22] = new(ExtensionAlreadyInitializedError)
	nameToErrorMap["ExtensionAlreadyInitialized"] = new(ExtensionAlreadyInitializedError)
	codeToErrorMap[23] = new(ConfidentialTransferAccountHasBalanceError)
	nameToErrorMap["ConfidentialTransferAccountHasBalance"] = new(ConfidentialTransferAccountHasBalanceError)
	codeToErrorMap[24] = new(ConfidentialTransferAccountNotApprovedError)
	nameToErrorMap["ConfidentialTransferAccountNotApproved"] = new(ConfidentialTransferAccountNotApprovedError)
	codeToErrorMap[25] = new(ConfidentialTransferDepositsAndTransfersDisabledError)
	nameToErrorMap["ConfidentialTransferDepositsAndTransfersDisabled"] = new(ConfidentialTransferDepositsAndTransfersDisabledError)
	codeToErrorMap[26] = new(ConfidentialTransferElGamalPubkeyMismatchError)
	nameToErrorMap["ConfidentialTransferElGamalPubkeyMismatch"] = new(ConfidentialTransferElGamalPubkeyMismatchError)
	codeToErrorMap[27] = new(ConfidentialTransferBalanceMismatchError)
	nameToErrorMap["ConfidentialTransferBalanceMismatch"] = new(ConfidentialTransferBalanceMismatchError)
	codeToErrorMap[28] = new(MintHasSupplyError)
	nameToErrorMap["MintHasSupply"] = new(MintHasSupplyError)
	codeToErrorMap[29] = new(NoAuthorityExistsError)
	nameToErrorMap["NoAuthorityExists"] = new(NoAuthorityExistsError)
	codeToErrorMap[30] = new(TransferFeeExceedsMaximumError)
	nameToErrorMap["TransferFeeExceedsMaximum"] = new(TransferFeeExceedsMaximumError)
	codeToErrorMap[31] = new(MintRequiredForTransferError)
	nameToErrorMap["MintRequiredForTransfer"] = new(MintRequiredForTransferError)
	codeToErrorMap[32] = new(FeeMismatchError)
	nameToErrorMap["FeeMismatch"] = new(FeeMismatchError)
	codeToErrorMap[33] = new(FeeParametersMismatchError)
	nameToErrorMap["FeeParametersMismatch"] = new(FeeParametersMismatchError)
	codeToErrorMap[34] = new(ImmutableOwnerError)
	nameToErrorMap["ImmutableOwner"] = new(ImmutableOwnerError)
	codeToErrorMap[35] = new(AccountHasWithheldTransferFeesError)
	nameToErrorMap["AccountHasWithheldTransferFees"] = new(AccountHasWithheldTransferFeesError)
	codeToErrorMap[36] = new(NoMemoError)
	nameToErrorMap["NoMemo"] = new(NoMemoError)
	codeToErrorMap[37] = new(NonTransferableError)
	nameToErrorMap["NonTransferable"] = new(NonTransferableError)
	codeToErrorMap[38] = new(NonTransferableNeedsImmutableOwnershipError)
	nameToErrorMap["NonTransferableNeedsImmutableOwnership"] = new(NonTransferableNeedsImmutableOwnershipError)
	codeToErrorMap[39] = new(MaximumPendingBalanceCreditCounterExceededError)
	nameToErrorMap["MaximumPendingBalanceCreditCounterExceeded"] = new(MaximumPendingBalanceCreditCounterExceededError)
	codeToErrorMap[40] = new(MaximumDepositAmountExceededError)
	nameToErrorMap["MaximumDepositAmountExceeded"] = new(MaximumDepositAmountExceededError)
	codeToErrorMap[41] = new(CpiGuardSettingsLockedError)
	nameToErrorMap["CpiGuardSettingsLocked"] = new(CpiGuardSettingsLockedError)
	codeToErrorMap[42] = new(CpiGuardTransferBlockedError)
	nameToErrorMap["CpiGuardTransferBlocked"] = new(CpiGuardTransferBlockedError)
	codeToErrorMap[43] = new(CpiGuardBurnBlockedError)
	nameToErrorMap["CpiGuardBurnBlocked"] = new(CpiGuardBurnBlockedError)
	codeToErrorMap[44] = new(CpiGuardCloseAccountBlockedError)
	nameToErrorMap["CpiGuardCloseAccountBlocked"] = new(CpiGuardCloseAccountBlockedError)
	codeToErrorMap[45] = new(CpiGuardApproveBlockedError)
	nameToErrorMap["CpiGuardApproveBlocked"] = new(CpiGuardApproveBlockedError)
	codeToErrorMap[46] = new(CpiGuardSetAuthorityBlockedError)
	nameToErrorMap["CpiGuardSetAuthorityBlocked"] = new(CpiGuardSetAuthorityBlockedError)
	codeToErrorMap[47] = new(CpiGuardOwnerChangeBlockedError)
	nameToErrorMap["CpiGuardOwnerChangeBlocked"] = new(CpiGuardOwnerChangeBlockedError)
	codeToErrorMap[48] = new(ExtensionNotFoundError)
	nameToErrorMap["ExtensionNotFound"] = new(ExtensionNotFoundError)
	codeToErrorMap[49] = new(NonConfidentialTransfersDisabledError)
	nameToErrorMap["NonConfidentialTransfersDisabled"] = new(NonConfidentialTransfersDisabledError)
	codeToErrorMap[50] = new(ConfidentialTransferFeeAccountHasWithheldFeeError)
	nameToErrorMap["ConfidentialTransferFeeAccountHasWithheldFee"] = new(ConfidentialTransferFeeAccountHasWithheldFeeError)
	codeToErrorMap[51] = new(InvalidExtensionCombinationError)
	nameToErrorMap["InvalidExtensionCombination"] = new(InvalidExtensionCombinationError)
	codeToErrorMap[52] = new(InvalidLengthForAllocError)
	nameToErrorMap["InvalidLengthForAlloc"] = new(InvalidLengthForAllocError)
	codeToErrorMap[53] = new(AccountDecryptionError)
	nameToErrorMap["AccountDecryption"] = new(AccountDecryptionError)
	codeToErrorMap[54] = new(ProofGenerationError)
	nameToErrorMap["ProofGeneration"] = new(ProofGenerationError)
	codeToErrorMap[55] = new(InvalidProofInstructionOffsetError)
	nameToErrorMap["InvalidProofInstructionOffset"] = new(InvalidProofInstructionOffsetError)
	codeToErrorMap[56] = new(HarvestToMintDisabledError)
	nameToErrorMap["HarvestToMintDisabled"] = new(HarvestToMintDisabledError)
	codeToErrorMap[57] = new(SplitProofContextStateAccountsNotSupportedError)
	nameToErrorMap["SplitProofContextStateAccountsNotSupported"] = new(SplitProofContextStateAccountsNotSupportedError)
	codeToErrorMap[58] = new(NotEnoughProofContextStateAccountsError)
	nameToErrorMap["NotEnoughProofContextStateAccounts"] = new(NotEnoughProofContextStateAccountsError)
	codeToErrorMap[59] = new(MalformedCiphertextError)
	nameToErrorMap["MalformedCiphertext"] = new(MalformedCiphertextError)
	codeToErrorMap[60] = new(CiphertextArithmeticFailedError)
	nameToErrorMap["CiphertextArithmeticFailed"] = new(CiphertextArithmeticFailedError)
}

func GetSplToken2022ErrorFromCode(code int) ProgramError {
	return codeToErrorMap[code]
}

func GetSplToken2022ErrorFromName(name string) ProgramError {
	return nameToErrorMap[name]
}

// NotRentExemptError Error: 0 `Lamport balance below rent-exempt threshold`
type NotRentExemptError struct{}

func (e NotRentExemptError) Code() int {
	return 0
}
func (e NotRentExemptError) Error() string {
	return "Lamport balance below rent-exempt threshold"
}

// InsufficientFundsError Error: 1 `Insufficient funds`
type InsufficientFundsError struct{}

func (e InsufficientFundsError) Code() int {
	return 1
}
func (e InsufficientFundsError) Error() string {
	return "Insufficient funds"
}

// InvalidMintError Error: 2 `Invalid Mint`
type InvalidMintError struct{}

func (e InvalidMintError) Code() int {
	return 2
}
func (e InvalidMintError) Error() string {
	return "Invalid Mint"
}

// MintMismatchError Error: 3 `Account not associated with this Mint`
type MintMismatchError struct{}

func (e MintMismatchError) Code() int {
	return 3
}
func (e MintMismatchError) Error() string {
	return "Account not associated with this Mint"
}

// OwnerMismatchError Error: 4 `Owner does not match`
type OwnerMismatchError struct{}

func (e OwnerMismatchError) Code() int {
	return 4
}
func (e OwnerMismatchError) Error() string {
	return "Owner does not match"
}

// FixedSupplyError Error: 5 `Fixed supply`
type FixedSupplyError struct{}

func (e FixedSupplyError) Code() int {
	return 5
}
func (e FixedSupplyError) Error() string {
	return "Fixed supply"
}

// AlreadyInUseError Error: 6 `Already in use`
type AlreadyInUseError struct{}

func (e AlreadyInUseError) Code() int {
	return 6
}
func (e AlreadyInUseError) Error() string {
	return "Already in use"
}

// InvalidNumberOfProvidedSignersError Error: 7 `Invalid number of provided signers`
type InvalidNumberOfProvidedSignersError struct{}

func (e InvalidNumberOfProvidedSignersError) Code() int {
	return 7
}
func (e InvalidNumberOfProvidedSignersError) Error() string {
	return "Invalid number of provided signers"
}

// InvalidNumberOfRequiredSignersError Error: 8 `Invalid number of required signers`
type InvalidNumberOfRequiredSignersError struct{}

func (e InvalidNumberOfRequiredSignersError) Code() int {
	return 8
}
func (e InvalidNumberOfRequiredSignersError) Error() string {
	return "Invalid number of required signers"
}

// UninitializedStateError Error: 9 `State is uninitialized`
type UninitializedStateError struct{}

func (e UninitializedStateError) Code() int {
	return 9
}
func (e UninitializedStateError) Error() string {
	return "State is uninitialized"
}

// NativeNotSupportedError Error: 10 `Instruction does not support native tokens`
type NativeNotSupportedError struct{}

func (e NativeNotSupportedError) Code() int {
	return 10
}
func (e NativeNotSupportedError) Error() string {
	return "Instruction does not support native tokens"
}

// NonNativeHasBalanceError Error: 11 `Non-native account can only be closed if its balance is zero`
type NonNativeHasBalanceError struct{}

func (e NonNativeHasBalanceError) Code() int {
	return 11
}
func (e NonNativeHasBalanceError) Error() string {
	return "Non-native account can only be closed if its balance is zero"
}

// InvalidInstructionError Error: 12 `Invalid instruction`
type InvalidInstructionError struct{}

func (e InvalidInstructionError) Code() int {
	return 12
}
func (e InvalidInstructionError) Error() string {
	return "Invalid instruction"
}

// InvalidStateError Error: 13 `State is invalid for requested operation`
type InvalidStateError struct{}

func (e InvalidStateError) Code() int {
	return 13
}
func (e InvalidStateError) Error() string {
	return "State is invalid for requested operation"
}

// OverflowError Error: 14 `Operation overflowed`
type OverflowError struct{}

func (e OverflowError) Code() int {
	return 14
}
func (e OverflowError) Error() string {
	return "Operation overflowed"
}

// AuthorityTypeNotSupportedError Error: 15 `Account does not support specified authority type`
type AuthorityTypeNotSupportedError struct{}

func (e AuthorityTypeNotSupportedError) Code() int {
	return 15
}
func (e AuthorityTypeNotSupportedError) Error() string {
	return "Account does not support specified authority type"
}

// MintCannotFreezeError Error: 16 `This token mint cannot freeze accounts`
type MintCannotFreezeError struct{}

func (e MintCannotFreezeError) Code() int {
	return 16
}
func (e MintCannotFreezeError) Error() string {
	return "This token mint cannot freeze accounts"
}

// AccountFrozenError Error: 17 `Account is frozen`
type AccountFrozenError struct{}

func (e AccountFrozenError) Code() int {
	return 17
}
func (e AccountFrozenError) Error() string {
	return "Account is frozen"
}

// MintDecimalsMismatchError Error: 18 `The provided decimals value different from the Mint decimals`
type MintDecimalsMismatchError struct{}

func (e MintDecimalsMismatchError) Code() int {
	return 18
}
func (e MintDecimalsMismatchError) Error() string {
	return "The provided decimals value different from the Mint decimals"
}

// NonNativeNotSupportedError Error: 19 `Instruction does not support non-native tokens`
type NonNativeNotSupportedError struct{}

func (e NonNativeNotSupportedError) Code() int {
	return 19
}
func (e NonNativeNotSupportedError) Error() string {
	return "Instruction does not support non-native tokens"
}

// ExtensionTypeMismatchError Error: 20 `Extension type does not match already existing extensions`
type ExtensionTypeMismatchError struct{}

func (e ExtensionTypeMismatchError) Code() int {
	return 20
}
func (e ExtensionTypeMismatchError) Error() string {
	return "Extension type does not match already existing extensions"
}

// ExtensionBaseMismatchError Error: 21 `Extension does not match the base type provided`
type ExtensionBaseMismatchError struct{}

func (e ExtensionBaseMismatchError) Code() int {
	return 21
}
func (e ExtensionBaseMismatchError) Error() string {
	return "Extension does not match the base type provided"
}

// ExtensionAlreadyInitializedError Error: 22 `Extension already initialized on this account`
type ExtensionAlreadyInitializedError struct{}

func (e ExtensionAlreadyInitializedError) Code() int {
	return 22
}
func (e ExtensionAlreadyInitializedError) Error() string {
	return "Extension already initialized on this account"
}

// ConfidentialTransferAccountHasBalanceError Error: 23 `An account can only be closed if its confidential balance is zero`
type ConfidentialTransferAccountHasBalanceError struct{}

func (e ConfidentialTransferAccountHasBalanceError) Code() int {
	return 23
}
func (e ConfidentialTransferAccountHasBalanceError) Error() string {
	return "An account can only be closed if its confidential balance is zero"
}

// ConfidentialTransferAccountNotApprovedError Error: 24 `Account not approved for confidential transfers`
type ConfidentialTransferAccountNotApprovedError struct{}

func (e ConfidentialTransferAccountNotApprovedError) Code() int {
	return 24
}
func (e ConfidentialTransferAccountNotApprovedError) Error() string {
	return "Account not approved for confidential transfers"
}

// ConfidentialTransferDepositsAndTransfersDisabledError Error: 25 `Account not accepting deposits or transfers`
type ConfidentialTransferDepositsAndTransfersDisabledError struct{}

func (e ConfidentialTransferDepositsAndTransfersDisabledError) Code() int {
	return 25
}
func (e ConfidentialTransferDepositsAndTransfersDisabledError) Error() string {
	return "Account not accepting deposits or transfers"
}

// ConfidentialTransferElGamalPubkeyMismatchError Error: 26 `ElGamal public key mismatch`
type ConfidentialTransferElGamalPubkeyMismatchError struct{}

func (e ConfidentialTransferElGamalPubkeyMismatchError) Code() int {
	return 26
}
func (e ConfidentialTransferElGamalPubkeyMismatchError) Error() string {
	return "ElGamal public key mismatch"
}

// ConfidentialTransferBalanceMismatchError Error: 27 `Balance mismatch`
type ConfidentialTransferBalanceMismatchError struct{}

func (e ConfidentialTransferBalanceMismatchError) Code() int {
	return 27
}
func (e ConfidentialTransferBalanceMismatchError) Error() string {
	return "Balance mismatch"
}

// MintHasSupplyError Error: 28 `Mint has non-zero supply. Burn all tokens before closing the mint`
type MintHasSupplyError struct{}

func (e MintHasSupplyError) Code() int {
	return 28
}
func (e MintHasSupplyError) Error() string {
	return "Mint has non-zero supply. Burn all tokens before closing the mint"
}

// NoAuthorityExistsError Error: 29 `No authority exists to perform the desired operation`
type NoAuthorityExistsError struct{}

func (e NoAuthorityExistsError) Code() int {
	return 29
}
func (e NoAuthorityExistsError) Error() string {
	return "No authority exists to perform the desired operation"
}

// TransferFeeExceedsMaximumError Error: 30 `Transfer fee exceeds maximum of 10,000 basis points`
type TransferFeeExceedsMaximumError struct{}

func (e TransferFeeExceedsMaximumError) Code() int {
	return 30
}
func (e TransferFeeExceedsMaximumError) Error() string {
	return "Transfer fee exceeds maximum of 10,000 basis points"
}

// MintRequiredForTransferError Error: 31 `Mint required for this account to transfer tokens, use `transfer_checked` or `transfer_checked_with_fee“
type MintRequiredForTransferError struct{}

func (e MintRequiredForTransferError) Code() int {
	return 31
}
func (e MintRequiredForTransferError) Error() string {
	return "Mint required for this account to transfer tokens, use `transfer_checked` or `transfer_checked_with_fee`"
}

// FeeMismatchError Error: 32 `Calculated fee does not match expected fee`
type FeeMismatchError struct{}

func (e FeeMismatchError) Code() int {
	return 32
}
func (e FeeMismatchError) Error() string {
	return "Calculated fee does not match expected fee"
}

// FeeParametersMismatchError Error: 33 `Fee parameters associated with zero-knowledge proofs do not match fee parameters in mint`
type FeeParametersMismatchError struct{}

func (e FeeParametersMismatchError) Code() int {
	return 33
}
func (e FeeParametersMismatchError) Error() string {
	return "Fee parameters associated with zero-knowledge proofs do not match fee parameters in mint"
}

// ImmutableOwnerError Error: 34 `The owner authority cannot be changed`
type ImmutableOwnerError struct{}

func (e ImmutableOwnerError) Code() int {
	return 34
}
func (e ImmutableOwnerError) Error() string {
	return "The owner authority cannot be changed"
}

// AccountHasWithheldTransferFeesError Error: 35 `An account can only be closed if its withheld fee balance is zero, harvest fees to the mint and try again`
type AccountHasWithheldTransferFeesError struct{}

func (e AccountHasWithheldTransferFeesError) Code() int {
	return 35
}
func (e AccountHasWithheldTransferFeesError) Error() string {
	return "An account can only be closed if its withheld fee balance is zero, harvest fees to the mint and try again"
}

// NoMemoError Error: 36 `No memo in previous instruction; required for recipient to receive a transfer`
type NoMemoError struct{}

func (e NoMemoError) Code() int {
	return 36
}
func (e NoMemoError) Error() string {
	return "No memo in previous instruction; required for recipient to receive a transfer"
}

// NonTransferableError Error: 37 `Transfer is disabled for this mint`
type NonTransferableError struct{}

func (e NonTransferableError) Code() int {
	return 37
}
func (e NonTransferableError) Error() string {
	return "Transfer is disabled for this mint"
}

// NonTransferableNeedsImmutableOwnershipError Error: 38 `Non-transferable tokens can't be minted to an account without immutable ownership`
type NonTransferableNeedsImmutableOwnershipError struct{}

func (e NonTransferableNeedsImmutableOwnershipError) Code() int {
	return 38
}
func (e NonTransferableNeedsImmutableOwnershipError) Error() string {
	return "Non-transferable tokens can't be minted to an account without immutable ownership"
}

/*
MaximumPendingBalanceCreditCounterExceededError Error: 39 `The total number of `Deposit` and `Transfer` instructions to an account cannot exceed

	the associated `maximum_pending_balance_credit_counter``
*/
type MaximumPendingBalanceCreditCounterExceededError struct{}

func (e MaximumPendingBalanceCreditCounterExceededError) Code() int {
	return 39
}
func (e MaximumPendingBalanceCreditCounterExceededError) Error() string {
	return "The total number of `Deposit` and `Transfer` instructions to an account cannot exceed\n            the associated `maximum_pending_balance_credit_counter`"
}

// MaximumDepositAmountExceededError Error: 40 `Deposit amount exceeds maximum limit`
type MaximumDepositAmountExceededError struct{}

func (e MaximumDepositAmountExceededError) Code() int {
	return 40
}
func (e MaximumDepositAmountExceededError) Error() string {
	return "Deposit amount exceeds maximum limit"
}

// CpiGuardSettingsLockedError Error: 41 `CPI Guard cannot be enabled or disabled in CPI`
type CpiGuardSettingsLockedError struct{}

func (e CpiGuardSettingsLockedError) Code() int {
	return 41
}
func (e CpiGuardSettingsLockedError) Error() string {
	return "CPI Guard cannot be enabled or disabled in CPI"
}

// CpiGuardTransferBlockedError Error: 42 `CPI Guard is enabled, and a program attempted to transfer user funds via CPI without using a delegate`
type CpiGuardTransferBlockedError struct{}

func (e CpiGuardTransferBlockedError) Code() int {
	return 42
}
func (e CpiGuardTransferBlockedError) Error() string {
	return "CPI Guard is enabled, and a program attempted to transfer user funds via CPI without using a delegate"
}

// CpiGuardBurnBlockedError Error: 43 `CPI Guard is enabled, and a program attempted to burn user funds via CPI without using a delegate`
type CpiGuardBurnBlockedError struct{}

func (e CpiGuardBurnBlockedError) Code() int {
	return 43
}
func (e CpiGuardBurnBlockedError) Error() string {
	return "CPI Guard is enabled, and a program attempted to burn user funds via CPI without using a delegate"
}

// CpiGuardCloseAccountBlockedError Error: 44 `CPI Guard is enabled, and a program attempted to close an account via CPI without returning lamports to owner`
type CpiGuardCloseAccountBlockedError struct{}

func (e CpiGuardCloseAccountBlockedError) Code() int {
	return 44
}
func (e CpiGuardCloseAccountBlockedError) Error() string {
	return "CPI Guard is enabled, and a program attempted to close an account via CPI without returning lamports to owner"
}

// CpiGuardApproveBlockedError Error: 45 `CPI Guard is enabled, and a program attempted to approve a delegate via CPI`
type CpiGuardApproveBlockedError struct{}

func (e CpiGuardApproveBlockedError) Code() int {
	return 45
}
func (e CpiGuardApproveBlockedError) Error() string {
	return "CPI Guard is enabled, and a program attempted to approve a delegate via CPI"
}

// CpiGuardSetAuthorityBlockedError Error: 46 `CPI Guard is enabled, and a program attempted to add or replace an authority via CPI`
type CpiGuardSetAuthorityBlockedError struct{}

func (e CpiGuardSetAuthorityBlockedError) Code() int {
	return 46
}
func (e CpiGuardSetAuthorityBlockedError) Error() string {
	return "CPI Guard is enabled, and a program attempted to add or replace an authority via CPI"
}

// CpiGuardOwnerChangeBlockedError Error: 47 `Account ownership cannot be changed while CPI Guard is enabled`
type CpiGuardOwnerChangeBlockedError struct{}

func (e CpiGuardOwnerChangeBlockedError) Code() int {
	return 47
}
func (e CpiGuardOwnerChangeBlockedError) Error() string {
	return "Account ownership cannot be changed while CPI Guard is enabled"
}

// ExtensionNotFoundError Error: 48 `Extension not found in account data`
type ExtensionNotFoundError struct{}

func (e ExtensionNotFoundError) Code() int {
	return 48
}
func (e ExtensionNotFoundError) Error() string {
	return "Extension not found in account data"
}

// NonConfidentialTransfersDisabledError Error: 49 `Non-confidential transfers disabled`
type NonConfidentialTransfersDisabledError struct{}

func (e NonConfidentialTransfersDisabledError) Code() int {
	return 49
}
func (e NonConfidentialTransfersDisabledError) Error() string {
	return "Non-confidential transfers disabled"
}

// ConfidentialTransferFeeAccountHasWithheldFeeError Error: 50 `An account can only be closed if the confidential withheld fee is zero`
type ConfidentialTransferFeeAccountHasWithheldFeeError struct{}

func (e ConfidentialTransferFeeAccountHasWithheldFeeError) Code() int {
	return 50
}
func (e ConfidentialTransferFeeAccountHasWithheldFeeError) Error() string {
	return "An account can only be closed if the confidential withheld fee is zero"
}

// InvalidExtensionCombinationError Error: 51 `A mint or an account is initialized to an invalid combination of extensions`
type InvalidExtensionCombinationError struct{}

func (e InvalidExtensionCombinationError) Code() int {
	return 51
}
func (e InvalidExtensionCombinationError) Error() string {
	return "A mint or an account is initialized to an invalid combination of extensions"
}

// InvalidLengthForAllocError Error: 52 `Extension allocation with overwrite must use the same length`
type InvalidLengthForAllocError struct{}

func (e InvalidLengthForAllocError) Code() int {
	return 52
}
func (e InvalidLengthForAllocError) Error() string {
	return "Extension allocation with overwrite must use the same length"
}

// AccountDecryptionError Error: 53 `Failed to decrypt a confidential transfer account`
type AccountDecryptionError struct{}

func (e AccountDecryptionError) Code() int {
	return 53
}
func (e AccountDecryptionError) Error() string {
	return "Failed to decrypt a confidential transfer account"
}

// ProofGenerationError Error: 54 `Failed to generate proof`
type ProofGenerationError struct{}

func (e ProofGenerationError) Code() int {
	return 54
}
func (e ProofGenerationError) Error() string {
	return "Failed to generate proof"
}

// InvalidProofInstructionOffsetError Error: 55 `An invalid proof instruction offset was provided`
type InvalidProofInstructionOffsetError struct{}

func (e InvalidProofInstructionOffsetError) Code() int {
	return 55
}
func (e InvalidProofInstructionOffsetError) Error() string {
	return "An invalid proof instruction offset was provided"
}

// HarvestToMintDisabledError Error: 56 `Harvest of withheld tokens to mint is disabled`
type HarvestToMintDisabledError struct{}

func (e HarvestToMintDisabledError) Code() int {
	return 56
}
func (e HarvestToMintDisabledError) Error() string {
	return "Harvest of withheld tokens to mint is disabled"
}

// SplitProofContextStateAccountsNotSupportedError Error: 57 `Split proof context state accounts not supported for instruction`
type SplitProofContextStateAccountsNotSupportedError struct{}

func (e SplitProofContextStateAccountsNotSupportedError) Code() int {
	return 57
}
func (e SplitProofContextStateAccountsNotSupportedError) Error() string {
	return "Split proof context state accounts not supported for instruction"
}

// NotEnoughProofContextStateAccountsError Error: 58 `Not enough proof context state accounts provided`
type NotEnoughProofContextStateAccountsError struct{}

func (e NotEnoughProofContextStateAccountsError) Code() int {
	return 58
}
func (e NotEnoughProofContextStateAccountsError) Error() string {
	return "Not enough proof context state accounts provided"
}

// MalformedCiphertextError Error: 59 `Ciphertext is malformed`
type MalformedCiphertextError struct{}

func (e MalformedCiphertextError) Code() int {
	return 59
}
func (e MalformedCiphertextError) Error() string {
	return "Ciphertext is malformed"
}

// CiphertextArithmeticFailedError Error: 60 `Ciphertext arithmetic failed`
type CiphertextArithmeticFailedError struct{}

func (e CiphertextArithmeticFailedError) Code() int {
	return 60
}
func (e CiphertextArithmeticFailedError) Error() string {
	return "Ciphertext arithmetic failed"
}
