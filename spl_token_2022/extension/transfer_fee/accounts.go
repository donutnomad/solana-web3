// This code was AUTOGENERATED using the library.
// Please DO NOT EDIT THIS FILE.

package transfer_fee

import (
	common "github.com/donutnomad/solana-web3/common"
	binary "github.com/gagliardetto/binary"
)

// TransferFee Struct
type TransferFee struct {
	// First epoch where the transfer fee takes effect
	Epoch uint64
	// Maximum fee assessed on transfers, expressed as an amount of tokens
	MaximumFee uint64
	// Amount of transfer collected as fees, expressed as basis points of the
	// transfer amount, ie. increments of 0.01%
	TransferFeeBasisPoints uint16
}

const TRANSFER_FEE_SIZE = 18

func (obj *TransferFee) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.Epoch); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.MaximumFee); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.TransferFeeBasisPoints); err != nil {
		return err
	}
	return nil
}

func (obj *TransferFee) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.Epoch); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.MaximumFee); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.TransferFeeBasisPoints); err != nil {
		return err
	}
	return nil
}

// TransferFeeConfig Struct
type TransferFeeConfig struct {
	// Optional authority to set the fee
	TransferFeeConfigAuthority common.PublicKey
	// Withdraw from mint instructions must be signed by this key
	WithdrawWithheldAuthority common.PublicKey
	// Withheld transfer fee tokens that have been moved to the mint for
	// withdrawal
	WithheldAmount uint64
	// Older transfer fee, used if the current epoch < new_transfer_fee.epoch
	OlderTransferFee TransferFee
	// Newer transfer fee, used if the current epoch >= new_transfer_fee.epoch
	NewerTransferFee TransferFee
}

const TRANSFER_FEE_CONFIG_SIZE = 108

func (obj *TransferFeeConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	if err = encoder.Encode(&obj.TransferFeeConfigAuthority); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.WithdrawWithheldAuthority); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.WithheldAmount); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.OlderTransferFee); err != nil {
		return err
	}
	if err = encoder.Encode(&obj.NewerTransferFee); err != nil {
		return err
	}
	return nil
}

func (obj *TransferFeeConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	if err = decoder.Decode(&obj.TransferFeeConfigAuthority); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.WithdrawWithheldAuthority); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.WithheldAmount); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.OlderTransferFee); err != nil {
		return err
	}
	if err = decoder.Decode(&obj.NewerTransferFee); err != nil {
		return err
	}
	return nil
}
